# Generated from java-escape by ANTLR 4.5
# encoding: utf-8
from __future__ import print_function
from antlr4 import *
from io import StringIO
package = globals().get("__package__", None)
ischild = len(package)>0 if package is not None else False
if ischild:
    from .CListener import CListener
    from .CVisitor import CVisitor
else:
    from CListener import CListener
    from CVisitor import CVisitor

def serializedATN():
    with StringIO() as buf:
        buf.write(u"\3\u0430\ud6d1\u8206\uad2d\u4417\uaef1\u8d80\uaadd\3")
        buf.write(u"s\u04c1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7\t")
        buf.write(u"\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write(u"\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4")
        buf.write(u"\23\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30")
        buf.write(u"\t\30\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t")
        buf.write(u"\35\4\36\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$")
        buf.write(u"\t$\4%\t%\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t")
        buf.write(u",\4-\t-\4.\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63")
        buf.write(u"\t\63\4\64\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\4")
        buf.write(u"9\t9\4:\t:\4;\t;\4<\t<\4=\t=\4>\t>\4?\t?\4@\t@\4A\tA")
        buf.write(u"\4B\tB\4C\tC\4D\tD\4E\tE\4F\tF\4G\tG\4H\tH\4I\tI\4J\t")
        buf.write(u"J\4K\tK\4L\tL\4M\tM\3\2\3\2\3\2\6\2\u009e\n\2\r\2\16")
        buf.write(u"\2\u009f\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write(u"\7\2\u00ad\n\2\f\2\16\2\u00b0\13\2\3\2\3\2\3\2\5\2\u00b5")
        buf.write(u"\n\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2")
        buf.write(u"\3\2\3\2\3\2\3\2\3\2\3\2\5\2\u00c9\n\2\3\3\3\3\3\3\3")
        buf.write(u"\3\3\3\3\3\3\3\5\3\u00d2\n\3\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\5\4\u00f6\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3")
        buf.write(u"\4\5\4\u0100\n\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4\3\4")
        buf.write(u"\3\4\3\4\7\4\u010d\n\4\f\4\16\4\u0110\13\4\3\5\3\5\3")
        buf.write(u"\5\7\5\u0115\n\5\f\5\16\5\u0118\13\5\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6\3\6")
        buf.write(u"\3\6\3\6\3\6\3\6\3\6\5\6\u0130\n\6\3\7\3\7\3\b\3\b\5")
        buf.write(u"\b\u0136\n\b\3\b\3\b\3\b\3\b\3\b\5\b\u013d\n\b\3\t\3")
        buf.write(u"\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\7\t\u014b")
        buf.write(u"\n\t\f\t\16\t\u014e\13\t\3\n\3\n\3\n\3\n\3\n\3\n\3\n")
        buf.write(u"\3\n\3\n\7\n\u0159\n\n\f\n\16\n\u015c\13\n\3\13\3\13")
        buf.write(u"\3\13\3\13\3\13\3\13\3\13\3\13\3\13\7\13\u0167\n\13\f")
        buf.write(u"\13\16\13\u016a\13\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f")
        buf.write(u"\3\f\3\f\3\f\3\f\3\f\3\f\3\f\7\f\u017b\n\f\f\f\16\f\u017e")
        buf.write(u"\13\f\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\3\r\7\r\u0189\n")
        buf.write(u"\r\f\r\16\r\u018c\13\r\3\16\3\16\3\16\3\16\3\16\3\16")
        buf.write(u"\7\16\u0194\n\16\f\16\16\16\u0197\13\16\3\17\3\17\3\17")
        buf.write(u"\3\17\3\17\3\17\7\17\u019f\n\17\f\17\16\17\u01a2\13\17")
        buf.write(u"\3\20\3\20\3\20\3\20\3\20\3\20\7\20\u01aa\n\20\f\20\16")
        buf.write(u"\20\u01ad\13\20\3\21\3\21\3\21\3\21\3\21\3\21\7\21\u01b5")
        buf.write(u"\n\21\f\21\16\21\u01b8\13\21\3\22\3\22\3\22\3\22\3\22")
        buf.write(u"\3\22\7\22\u01c0\n\22\f\22\16\22\u01c3\13\22\3\23\3\23")
        buf.write(u"\3\23\3\23\3\23\3\23\5\23\u01cb\n\23\3\24\3\24\3\24\3")
        buf.write(u"\24\3\24\5\24\u01d2\n\24\3\25\3\25\3\26\3\26\3\26\7\26")
        buf.write(u"\u01d9\n\26\f\26\16\26\u01dc\13\26\3\27\3\27\3\30\6\30")
        buf.write(u"\u01e1\n\30\r\30\16\30\u01e2\3\30\5\30\u01e6\n\30\3\30")
        buf.write(u"\3\30\3\30\5\30\u01eb\n\30\3\31\3\31\3\31\3\31\3\31\5")
        buf.write(u"\31\u01f2\n\31\3\32\3\32\3\32\7\32\u01f7\n\32\f\32\16")
        buf.write(u"\32\u01fa\13\32\3\33\3\33\3\33\3\33\3\33\5\33\u0201\n")
        buf.write(u"\33\3\34\3\34\3\35\3\35\3\35\3\35\3\35\3\35\3\35\3\35")
        buf.write(u"\3\35\3\35\3\35\3\35\3\35\3\35\5\35\u0213\n\35\3\36\3")
        buf.write(u"\36\5\36\u0217\n\36\3\36\3\36\6\36\u021b\n\36\r\36\16")
        buf.write(u"\36\u021c\3\36\3\36\3\36\3\36\3\36\5\36\u0224\n\36\3")
        buf.write(u"\37\3\37\3 \3 \5 \u022a\n \3 \3 \3 \5 \u022f\n \3!\3")
        buf.write(u"!\5!\u0233\n!\3!\3!\5!\u0237\n!\5!\u0239\n!\3\"\3\"\3")
        buf.write(u"\"\7\"\u023e\n\"\f\"\16\"\u0241\13\"\3#\3#\5#\u0245\n")
        buf.write(u"#\3#\3#\5#\u0249\n#\3$\3$\5$\u024d\n$\3$\3$\3$\3$\3$")
        buf.write(u"\3$\5$\u0255\n$\3$\3$\3$\3$\3$\3$\3$\5$\u025e\n$\3%\3")
        buf.write(u"%\3%\7%\u0263\n%\f%\16%\u0266\13%\3&\3&\3&\5&\u026b\n")
        buf.write(u"&\3\'\3\'\3\'\3\'\3\'\3(\3(\3)\3)\3)\3)\3)\3)\5)\u027a")
        buf.write(u"\n)\3*\3*\3*\3*\3*\3*\3*\3*\3*\3*\5*\u0286\n*\3+\5+\u0289")
        buf.write(u"\n+\3+\3+\7+\u028d\n+\f+\16+\u0290\13+\3,\3,\3,\3,\3")
        buf.write(u",\3,\5,\u0298\n,\3,\3,\3,\7,\u029d\n,\f,\16,\u02a0\13")
        buf.write(u",\3,\5,\u02a3\n,\3,\3,\3,\3,\3,\7,\u02aa\n,\f,\16,\u02ad")
        buf.write(u"\13,\3,\3,\3,\3,\3,\3,\6,\u02b5\n,\r,\16,\u02b6\3,\3")
        buf.write(u",\3,\3,\3,\3,\3,\7,\u02c0\n,\f,\16,\u02c3\13,\3,\3,\3")
        buf.write(u",\3,\3,\3,\3,\3,\3,\3,\5,\u02cf\n,\3,\7,\u02d2\n,\f,")
        buf.write(u"\16,\u02d5\13,\3-\3-\3-\6-\u02da\n-\r-\16-\u02db\3-\3")
        buf.write(u"-\5-\u02e0\n-\3.\3.\3.\3.\3.\3.\3.\3/\3/\3/\7/\u02ec")
        buf.write(u"\n/\f/\16/\u02ef\13/\3\60\3\60\3\60\5\60\u02f4\n\60\3")
        buf.write(u"\60\5\60\u02f7\n\60\3\60\5\60\u02fa\n\60\3\61\3\61\3")
        buf.write(u"\61\3\61\3\61\7\61\u0301\n\61\f\61\16\61\u0304\13\61")
        buf.write(u"\3\62\3\62\7\62\u0308\n\62\f\62\16\62\u030b\13\62\3\62")
        buf.write(u"\3\62\7\62\u030f\n\62\f\62\16\62\u0312\13\62\3\62\3\62")
        buf.write(u"\3\62\7\62\u0317\n\62\f\62\16\62\u031a\13\62\3\62\3\62")
        buf.write(u"\7\62\u031e\n\62\f\62\16\62\u0321\13\62\3\62\5\62\u0324")
        buf.write(u"\n\62\3\63\3\63\3\63\7\63\u0329\n\63\f\63\16\63\u032c")
        buf.write(u"\13\63\3\63\3\63\5\63\u0330\n\63\3\64\6\64\u0333\n\64")
        buf.write(u"\r\64\16\64\u0334\3\64\3\64\3\64\6\64\u033a\n\64\r\64")
        buf.write(u"\16\64\u033b\3\64\5\64\u033f\n\64\5\64\u0341\n\64\3\65")
        buf.write(u"\3\65\3\65\7\65\u0346\n\65\f\65\16\65\u0349\13\65\3\66")
        buf.write(u"\3\66\5\66\u034d\n\66\3\67\3\67\5\67\u0351\n\67\3\67")
        buf.write(u"\3\67\7\67\u0355\n\67\f\67\16\67\u0358\13\67\5\67\u035a")
        buf.write(u"\n\67\38\38\38\38\38\78\u0361\n8\f8\168\u0364\138\38")
        buf.write(u"\38\78\u0368\n8\f8\168\u036b\138\38\58\u036e\n8\38\3")
        buf.write(u"8\38\38\78\u0374\n8\f8\168\u0377\138\38\38\38\38\38\7")
        buf.write(u"8\u037e\n8\f8\168\u0381\138\38\38\38\38\38\38\38\38\3")
        buf.write(u"8\58\u038c\n8\38\38\78\u0390\n8\f8\168\u0393\138\58\u0395")
        buf.write(u"\n8\38\38\38\78\u039a\n8\f8\168\u039d\138\38\58\u03a0")
        buf.write(u"\n8\38\38\38\38\38\78\u03a7\n8\f8\168\u03aa\138\38\3")
        buf.write(u"8\38\38\38\38\68\u03b2\n8\r8\168\u03b3\38\38\38\38\3")
        buf.write(u"8\38\38\38\38\38\38\58\u03c1\n8\38\38\78\u03c5\n8\f8")
        buf.write(u"\168\u03c8\138\78\u03ca\n8\f8\168\u03cd\138\39\39\3:")
        buf.write(u"\3:\3:\3:\3:\3:\3:\3:\3:\3:\5:\u03db\n:\3;\3;\5;\u03df")
        buf.write(u"\n;\3;\3;\3;\3;\3;\5;\u03e6\n;\3;\7;\u03e9\n;\f;\16;")
        buf.write(u"\u03ec\13;\3<\3<\3<\3=\6=\u03f2\n=\r=\16=\u03f3\3>\3")
        buf.write(u">\3>\3>\3>\3>\5>\u03fc\n>\3?\3?\3?\3?\3?\6?\u0403\n?")
        buf.write(u"\r?\16?\u0404\3?\3?\3?\3@\3@\3@\3@\3@\3@\3@\3@\3@\3@")
        buf.write(u"\3@\3@\7@\u0416\n@\f@\16@\u0419\13@\5@\u041b\n@\3@\3")
        buf.write(u"@\3@\3@\7@\u0421\n@\f@\16@\u0424\13@\5@\u0426\n@\7@\u0428")
        buf.write(u"\n@\f@\16@\u042b\13@\3@\3@\5@\u042f\n@\3A\3A\3A\3A\3")
        buf.write(u"A\3A\3A\3A\3A\3A\3A\5A\u043c\nA\3B\3B\5B\u0440\nB\3B")
        buf.write(u"\3B\3C\6C\u0445\nC\rC\16C\u0446\3D\3D\5D\u044b\nD\3E")
        buf.write(u"\5E\u044e\nE\3E\3E\3F\3F\3F\3F\3F\3F\3F\5F\u0459\nF\3")
        buf.write(u"F\3F\3F\3F\3F\3F\5F\u0461\nF\3G\3G\3G\3G\3G\3G\3G\3G")
        buf.write(u"\3G\3G\3G\3G\3G\3G\3G\3G\3G\5G\u0474\nG\3G\3G\5G\u0478")
        buf.write(u"\nG\3G\3G\5G\u047c\nG\3G\3G\3G\3G\3G\3G\5G\u0484\nG\3")
        buf.write(u"G\3G\5G\u0488\nG\3G\3G\3G\5G\u048d\nG\3H\3H\3H\3H\3H")
        buf.write(u"\3H\3H\3H\3H\5H\u0498\nH\3H\3H\3H\3H\3H\5H\u049f\nH\3")
        buf.write(u"I\5I\u04a2\nI\3I\3I\3J\6J\u04a7\nJ\rJ\16J\u04a8\3K\3")
        buf.write(u"K\3K\5K\u04ae\nK\3L\7L\u04b1\nL\fL\16L\u04b4\13L\3L\3")
        buf.write(u"L\5L\u04b8\nL\3L\3L\3M\6M\u04bd\nM\rM\16M\u04be\3M\2")
        buf.write(u"\20\6\20\22\24\26\30\32\34\36 \"VntN\2\4\6\b\n\f\16\20")
        buf.write(u"\22\24\26\30\32\34\36 \"$&(*,.\60\62\64\668:<>@BDFHJ")
        buf.write(u"LNPRTVXZ\\^`bdfhjlnprtvxz|~\u0080\u0082\u0084\u0086\u0088")
        buf.write(u"\u008a\u008c\u008e\u0090\u0092\u0094\u0096\u0098\2\16")
        buf.write(u"\7\2IIKKMMPPUV\3\2[e\b\2\21\21\34\34$$**--<<\n\2\6\b")
        buf.write(u"\24\24\31\31\35\35\"#\'(/\60\66\67\3\2\6\b\4\2++..\6")
        buf.write(u"\2\25\25%%\61\61\65\65\5\2\n\13!!::\4\2=>ZZ\3\2=>\4\2")
        buf.write(u"\r\r\17\17\4\2\20\20\61\61\u053b\2\u00c8\3\2\2\2\4\u00d1")
        buf.write(u"\3\2\2\2\6\u00f5\3\2\2\2\b\u0111\3\2\2\2\n\u012f\3\2")
        buf.write(u"\2\2\f\u0131\3\2\2\2\16\u013c\3\2\2\2\20\u013e\3\2\2")
        buf.write(u"\2\22\u014f\3\2\2\2\24\u015d\3\2\2\2\26\u016b\3\2\2\2")
        buf.write(u"\30\u017f\3\2\2\2\32\u018d\3\2\2\2\34\u0198\3\2\2\2\36")
        buf.write(u"\u01a3\3\2\2\2 \u01ae\3\2\2\2\"\u01b9\3\2\2\2$\u01c4")
        buf.write(u"\3\2\2\2&\u01d1\3\2\2\2(\u01d3\3\2\2\2*\u01d5\3\2\2\2")
        buf.write(u",\u01dd\3\2\2\2.\u01ea\3\2\2\2\60\u01f1\3\2\2\2\62\u01f3")
        buf.write(u"\3\2\2\2\64\u0200\3\2\2\2\66\u0202\3\2\2\28\u0212\3\2")
        buf.write(u"\2\2:\u0223\3\2\2\2<\u0225\3\2\2\2>\u022e\3\2\2\2@\u0238")
        buf.write(u"\3\2\2\2B\u023a\3\2\2\2D\u0248\3\2\2\2F\u025d\3\2\2\2")
        buf.write(u"H\u025f\3\2\2\2J\u0267\3\2\2\2L\u026c\3\2\2\2N\u0271")
        buf.write(u"\3\2\2\2P\u0279\3\2\2\2R\u0285\3\2\2\2T\u0288\3\2\2\2")
        buf.write(u"V\u0297\3\2\2\2X\u02df\3\2\2\2Z\u02e1\3\2\2\2\\\u02e8")
        buf.write(u"\3\2\2\2^\u02f9\3\2\2\2`\u0302\3\2\2\2b\u0323\3\2\2\2")
        buf.write(u"d\u0325\3\2\2\2f\u0340\3\2\2\2h\u0342\3\2\2\2j\u034a")
        buf.write(u"\3\2\2\2l\u0359\3\2\2\2n\u0394\3\2\2\2p\u03ce\3\2\2\2")
        buf.write(u"r\u03da\3\2\2\2t\u03dc\3\2\2\2v\u03ed\3\2\2\2x\u03f1")
        buf.write(u"\3\2\2\2z\u03fb\3\2\2\2|\u03fd\3\2\2\2~\u042e\3\2\2\2")
        buf.write(u"\u0080\u043b\3\2\2\2\u0082\u043d\3\2\2\2\u0084\u0444")
        buf.write(u"\3\2\2\2\u0086\u044a\3\2\2\2\u0088\u044d\3\2\2\2\u008a")
        buf.write(u"\u0460\3\2\2\2\u008c\u048c\3\2\2\2\u008e\u049e\3\2\2")
        buf.write(u"\2\u0090\u04a1\3\2\2\2\u0092\u04a6\3\2\2\2\u0094\u04ad")
        buf.write(u"\3\2\2\2\u0096\u04b2\3\2\2\2\u0098\u04bc\3\2\2\2\u009a")
        buf.write(u"\u00c9\7k\2\2\u009b\u00c9\7l\2\2\u009c\u009e\7m\2\2\u009d")
        buf.write(u"\u009c\3\2\2\2\u009e\u009f\3\2\2\2\u009f\u009d\3\2\2")
        buf.write(u"\2\u009f\u00a0\3\2\2\2\u00a0\u00c9\3\2\2\2\u00a1\u00a2")
        buf.write(u"\7=\2\2\u00a2\u00a3\5*\26\2\u00a3\u00a4\7>\2\2\u00a4")
        buf.write(u"\u00c9\3\2\2\2\u00a5\u00a6\78\2\2\u00a6\u00a7\7=\2\2")
        buf.write(u"\u00a7\u00a8\5&\24\2\u00a8\u00a9\7Z\2\2\u00a9\u00ae\5")
        buf.write(u"\4\3\2\u00aa\u00ab\7Z\2\2\u00ab\u00ad\5\4\3\2\u00ac\u00aa")
        buf.write(u"\3\2\2\2\u00ad\u00b0\3\2\2\2\u00ae\u00ac\3\2\2\2\u00ae")
        buf.write(u"\u00af\3\2\2\2\u00af\u00b1\3\2\2\2\u00b0\u00ae\3\2\2")
        buf.write(u"\2\u00b1\u00b2\7>\2\2\u00b2\u00c9\3\2\2\2\u00b3\u00b5")
        buf.write(u"\7\3\2\2\u00b4\u00b3\3\2\2\2\u00b4\u00b5\3\2\2\2\u00b5")
        buf.write(u"\u00b6\3\2\2\2\u00b6\u00b7\7=\2\2\u00b7\u00b8\5\u0082")
        buf.write(u"B\2\u00b8\u00b9\7>\2\2\u00b9\u00c9\3\2\2\2\u00ba\u00bb")
        buf.write(u"\7\4\2\2\u00bb\u00bc\7=\2\2\u00bc\u00bd\5\n\6\2\u00bd")
        buf.write(u"\u00be\7Z\2\2\u00be\u00bf\5j\66\2\u00bf\u00c0\7>\2\2")
        buf.write(u"\u00c0\u00c9\3\2\2\2\u00c1\u00c2\7\5\2\2\u00c2\u00c3")
        buf.write(u"\7=\2\2\u00c3\u00c4\5j\66\2\u00c4\u00c5\7Z\2\2\u00c5")
        buf.write(u"\u00c6\5\n\6\2\u00c6\u00c7\7>\2\2\u00c7\u00c9\3\2\2\2")
        buf.write(u"\u00c8\u009a\3\2\2\2\u00c8\u009b\3\2\2\2\u00c8\u009d")
        buf.write(u"\3\2\2\2\u00c8\u00a1\3\2\2\2\u00c8\u00a5\3\2\2\2\u00c8")
        buf.write(u"\u00b4\3\2\2\2\u00c8\u00ba\3\2\2\2\u00c8\u00c1\3\2\2")
        buf.write(u"\2\u00c9\3\3\2\2\2\u00ca\u00cb\5j\66\2\u00cb\u00cc\7")
        buf.write(u"X\2\2\u00cc\u00cd\5&\24\2\u00cd\u00d2\3\2\2\2\u00ce\u00cf")
        buf.write(u"\7\27\2\2\u00cf\u00d0\7X\2\2\u00d0\u00d2\5&\24\2\u00d1")
        buf.write(u"\u00ca\3\2\2\2\u00d1\u00ce\3\2\2\2\u00d2\5\3\2\2\2\u00d3")
        buf.write(u"\u00d4\b\4\1\2\u00d4\u00f6\5\2\2\2\u00d5\u00d6\7=\2\2")
        buf.write(u"\u00d6\u00d7\5j\66\2\u00d7\u00d8\7>\2\2\u00d8\u00d9\7")
        buf.write(u"A\2\2\u00d9\u00da\5t;\2\u00da\u00db\7B\2\2\u00db\u00f6")
        buf.write(u"\3\2\2\2\u00dc\u00dd\7=\2\2\u00dd\u00de\5j\66\2\u00de")
        buf.write(u"\u00df\7>\2\2\u00df\u00e0\7A\2\2\u00e0\u00e1\5t;\2\u00e1")
        buf.write(u"\u00e2\7Z\2\2\u00e2\u00e3\7B\2\2\u00e3\u00f6\3\2\2\2")
        buf.write(u"\u00e4\u00e5\7\3\2\2\u00e5\u00e6\7=\2\2\u00e6\u00e7\5")
        buf.write(u"j\66\2\u00e7\u00e8\7>\2\2\u00e8\u00e9\7A\2\2\u00e9\u00ea")
        buf.write(u"\5t;\2\u00ea\u00eb\7B\2\2\u00eb\u00f6\3\2\2\2\u00ec\u00ed")
        buf.write(u"\7\3\2\2\u00ed\u00ee\7=\2\2\u00ee\u00ef\5j\66\2\u00ef")
        buf.write(u"\u00f0\7>\2\2\u00f0\u00f1\7A\2\2\u00f1\u00f2\5t;\2\u00f2")
        buf.write(u"\u00f3\7Z\2\2\u00f3\u00f4\7B\2\2\u00f4\u00f6\3\2\2\2")
        buf.write(u"\u00f5\u00d3\3\2\2\2\u00f5\u00d5\3\2\2\2\u00f5\u00dc")
        buf.write(u"\3\2\2\2\u00f5\u00e4\3\2\2\2\u00f5\u00ec\3\2\2\2\u00f6")
        buf.write(u"\u010e\3\2\2\2\u00f7\u00f8\f\f\2\2\u00f8\u00f9\7?\2\2")
        buf.write(u"\u00f9\u00fa\5*\26\2\u00fa\u00fb\7@\2\2\u00fb\u010d\3")
        buf.write(u"\2\2\2\u00fc\u00fd\f\13\2\2\u00fd\u00ff\7=\2\2\u00fe")
        buf.write(u"\u0100\5\b\5\2\u00ff\u00fe\3\2\2\2\u00ff\u0100\3\2\2")
        buf.write(u"\2\u0100\u0101\3\2\2\2\u0101\u010d\7>\2\2\u0102\u0103")
        buf.write(u"\f\n\2\2\u0103\u0104\7i\2\2\u0104\u010d\7k\2\2\u0105")
        buf.write(u"\u0106\f\t\2\2\u0106\u0107\7h\2\2\u0107\u010d\7k\2\2")
        buf.write(u"\u0108\u0109\f\b\2\2\u0109\u010d\7J\2\2\u010a\u010b\f")
        buf.write(u"\7\2\2\u010b\u010d\7L\2\2\u010c\u00f7\3\2\2\2\u010c\u00fc")
        buf.write(u"\3\2\2\2\u010c\u0102\3\2\2\2\u010c\u0105\3\2\2\2\u010c")
        buf.write(u"\u0108\3\2\2\2\u010c\u010a\3\2\2\2\u010d\u0110\3\2\2")
        buf.write(u"\2\u010e\u010c\3\2\2\2\u010e\u010f\3\2\2\2\u010f\7\3")
        buf.write(u"\2\2\2\u0110\u010e\3\2\2\2\u0111\u0116\5&\24\2\u0112")
        buf.write(u"\u0113\7Z\2\2\u0113\u0115\5&\24\2\u0114\u0112\3\2\2\2")
        buf.write(u"\u0115\u0118\3\2\2\2\u0116\u0114\3\2\2\2\u0116\u0117")
        buf.write(u"\3\2\2\2\u0117\t\3\2\2\2\u0118\u0116\3\2\2\2\u0119\u0130")
        buf.write(u"\5\6\4\2\u011a\u011b\7J\2\2\u011b\u0130\5\n\6\2\u011c")
        buf.write(u"\u011d\7L\2\2\u011d\u0130\5\n\6\2\u011e\u011f\5\f\7\2")
        buf.write(u"\u011f\u0120\5\16\b\2\u0120\u0130\3\2\2\2\u0121\u0122")
        buf.write(u"\7)\2\2\u0122\u0130\5\n\6\2\u0123\u0124\7)\2\2\u0124")
        buf.write(u"\u0125\7=\2\2\u0125\u0126\5j\66\2\u0126\u0127\7>\2\2")
        buf.write(u"\u0127\u0130\3\2\2\2\u0128\u0129\7\64\2\2\u0129\u012a")
        buf.write(u"\7=\2\2\u012a\u012b\5j\66\2\u012b\u012c\7>\2\2\u012c")
        buf.write(u"\u0130\3\2\2\2\u012d\u012e\7R\2\2\u012e\u0130\7k\2\2")
        buf.write(u"\u012f\u0119\3\2\2\2\u012f\u011a\3\2\2\2\u012f\u011c")
        buf.write(u"\3\2\2\2\u012f\u011e\3\2\2\2\u012f\u0121\3\2\2\2\u012f")
        buf.write(u"\u0123\3\2\2\2\u012f\u0128\3\2\2\2\u012f\u012d\3\2\2")
        buf.write(u"\2\u0130\13\3\2\2\2\u0131\u0132\t\2\2\2\u0132\r\3\2\2")
        buf.write(u"\2\u0133\u013d\5\n\6\2\u0134\u0136\7\3\2\2\u0135\u0134")
        buf.write(u"\3\2\2\2\u0135\u0136\3\2\2\2\u0136\u0137\3\2\2\2\u0137")
        buf.write(u"\u0138\7=\2\2\u0138\u0139\5j\66\2\u0139\u013a\7>\2\2")
        buf.write(u"\u013a\u013b\5\16\b\2\u013b\u013d\3\2\2\2\u013c\u0133")
        buf.write(u"\3\2\2\2\u013c\u0135\3\2\2\2\u013d\17\3\2\2\2\u013e\u013f")
        buf.write(u"\b\t\1\2\u013f\u0140\5\16\b\2\u0140\u014c\3\2\2\2\u0141")
        buf.write(u"\u0142\f\5\2\2\u0142\u0143\7M\2\2\u0143\u014b\5\16\b")
        buf.write(u"\2\u0144\u0145\f\4\2\2\u0145\u0146\7N\2\2\u0146\u014b")
        buf.write(u"\5\16\b\2\u0147\u0148\f\3\2\2\u0148\u0149\7O\2\2\u0149")
        buf.write(u"\u014b\5\16\b\2\u014a\u0141\3\2\2\2\u014a\u0144\3\2\2")
        buf.write(u"\2\u014a\u0147\3\2\2\2\u014b\u014e\3\2\2\2\u014c\u014a")
        buf.write(u"\3\2\2\2\u014c\u014d\3\2\2\2\u014d\21\3\2\2\2\u014e\u014c")
        buf.write(u"\3\2\2\2\u014f\u0150\b\n\1\2\u0150\u0151\5\20\t\2\u0151")
        buf.write(u"\u015a\3\2\2\2\u0152\u0153\f\4\2\2\u0153\u0154\7I\2\2")
        buf.write(u"\u0154\u0159\5\20\t\2\u0155\u0156\f\3\2\2\u0156\u0157")
        buf.write(u"\7K\2\2\u0157\u0159\5\20\t\2\u0158\u0152\3\2\2\2\u0158")
        buf.write(u"\u0155\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2")
        buf.write(u"\2\u015a\u015b\3\2\2\2\u015b\23\3\2\2\2\u015c\u015a\3")
        buf.write(u"\2\2\2\u015d\u015e\b\13\1\2\u015e\u015f\5\22\n\2\u015f")
        buf.write(u"\u0168\3\2\2\2\u0160\u0161\f\4\2\2\u0161\u0162\7G\2\2")
        buf.write(u"\u0162\u0167\5\22\n\2\u0163\u0164\f\3\2\2\u0164\u0165")
        buf.write(u"\7H\2\2\u0165\u0167\5\22\n\2\u0166\u0160\3\2\2\2\u0166")
        buf.write(u"\u0163\3\2\2\2\u0167\u016a\3\2\2\2\u0168\u0166\3\2\2")
        buf.write(u"\2\u0168\u0169\3\2\2\2\u0169\25\3\2\2\2\u016a\u0168\3")
        buf.write(u"\2\2\2\u016b\u016c\b\f\1\2\u016c\u016d\5\24\13\2\u016d")
        buf.write(u"\u017c\3\2\2\2\u016e\u016f\f\6\2\2\u016f\u0170\7C\2\2")
        buf.write(u"\u0170\u017b\5\24\13\2\u0171\u0172\f\5\2\2\u0172\u0173")
        buf.write(u"\7E\2\2\u0173\u017b\5\24\13\2\u0174\u0175\f\4\2\2\u0175")
        buf.write(u"\u0176\7D\2\2\u0176\u017b\5\24\13\2\u0177\u0178\f\3\2")
        buf.write(u"\2\u0178\u0179\7F\2\2\u0179\u017b\5\24\13\2\u017a\u016e")
        buf.write(u"\3\2\2\2\u017a\u0171\3\2\2\2\u017a\u0174\3\2\2\2\u017a")
        buf.write(u"\u0177\3\2\2\2\u017b\u017e\3\2\2\2\u017c\u017a\3\2\2")
        buf.write(u"\2\u017c\u017d\3\2\2\2\u017d\27\3\2\2\2\u017e\u017c\3")
        buf.write(u"\2\2\2\u017f\u0180\b\r\1\2\u0180\u0181\5\26\f\2\u0181")
        buf.write(u"\u018a\3\2\2\2\u0182\u0183\f\4\2\2\u0183\u0184\7f\2\2")
        buf.write(u"\u0184\u0189\5\26\f\2\u0185\u0186\f\3\2\2\u0186\u0187")
        buf.write(u"\7g\2\2\u0187\u0189\5\26\f\2\u0188\u0182\3\2\2\2\u0188")
        buf.write(u"\u0185\3\2\2\2\u0189\u018c\3\2\2\2\u018a\u0188\3\2\2")
        buf.write(u"\2\u018a\u018b\3\2\2\2\u018b\31\3\2\2\2\u018c\u018a\3")
        buf.write(u"\2\2\2\u018d\u018e\b\16\1\2\u018e\u018f\5\30\r\2\u018f")
        buf.write(u"\u0195\3\2\2\2\u0190\u0191\f\3\2\2\u0191\u0192\7P\2\2")
        buf.write(u"\u0192\u0194\5\30\r\2\u0193\u0190\3\2\2\2\u0194\u0197")
        buf.write(u"\3\2\2\2\u0195\u0193\3\2\2\2\u0195\u0196\3\2\2\2\u0196")
        buf.write(u"\33\3\2\2\2\u0197\u0195\3\2\2\2\u0198\u0199\b\17\1\2")
        buf.write(u"\u0199\u019a\5\32\16\2\u019a\u01a0\3\2\2\2\u019b\u019c")
        buf.write(u"\f\3\2\2\u019c\u019d\7T\2\2\u019d\u019f\5\32\16\2\u019e")
        buf.write(u"\u019b\3\2\2\2\u019f\u01a2\3\2\2\2\u01a0\u019e\3\2\2")
        buf.write(u"\2\u01a0\u01a1\3\2\2\2\u01a1\35\3\2\2\2\u01a2\u01a0\3")
        buf.write(u"\2\2\2\u01a3\u01a4\b\20\1\2\u01a4\u01a5\5\34\17\2\u01a5")
        buf.write(u"\u01ab\3\2\2\2\u01a6\u01a7\f\3\2\2\u01a7\u01a8\7Q\2\2")
        buf.write(u"\u01a8\u01aa\5\34\17\2\u01a9\u01a6\3\2\2\2\u01aa\u01ad")
        buf.write(u"\3\2\2\2\u01ab\u01a9\3\2\2\2\u01ab\u01ac\3\2\2\2\u01ac")
        buf.write(u"\37\3\2\2\2\u01ad\u01ab\3\2\2\2\u01ae\u01af\b\21\1\2")
        buf.write(u"\u01af\u01b0\5\36\20\2\u01b0\u01b6\3\2\2\2\u01b1\u01b2")
        buf.write(u"\f\3\2\2\u01b2\u01b3\7R\2\2\u01b3\u01b5\5\36\20\2\u01b4")
        buf.write(u"\u01b1\3\2\2\2\u01b5\u01b8\3\2\2\2\u01b6\u01b4\3\2\2")
        buf.write(u"\2\u01b6\u01b7\3\2\2\2\u01b7!\3\2\2\2\u01b8\u01b6\3\2")
        buf.write(u"\2\2\u01b9\u01ba\b\22\1\2\u01ba\u01bb\5 \21\2\u01bb\u01c1")
        buf.write(u"\3\2\2\2\u01bc\u01bd\f\3\2\2\u01bd\u01be\7S\2\2\u01be")
        buf.write(u"\u01c0\5 \21\2\u01bf\u01bc\3\2\2\2\u01c0\u01c3\3\2\2")
        buf.write(u"\2\u01c1\u01bf\3\2\2\2\u01c1\u01c2\3\2\2\2\u01c2#\3\2")
        buf.write(u"\2\2\u01c3\u01c1\3\2\2\2\u01c4\u01ca\5\"\22\2\u01c5\u01c6")
        buf.write(u"\7W\2\2\u01c6\u01c7\5*\26\2\u01c7\u01c8\7X\2\2\u01c8")
        buf.write(u"\u01c9\5$\23\2\u01c9\u01cb\3\2\2\2\u01ca\u01c5\3\2\2")
        buf.write(u"\2\u01ca\u01cb\3\2\2\2\u01cb%\3\2\2\2\u01cc\u01d2\5$")
        buf.write(u"\23\2\u01cd\u01ce\5\n\6\2\u01ce\u01cf\5(\25\2\u01cf\u01d0")
        buf.write(u"\5&\24\2\u01d0\u01d2\3\2\2\2\u01d1\u01cc\3\2\2\2\u01d1")
        buf.write(u"\u01cd\3\2\2\2\u01d2\'\3\2\2\2\u01d3\u01d4\t\3\2\2\u01d4")
        buf.write(u")\3\2\2\2\u01d5\u01da\5&\24\2\u01d6\u01d7\7Z\2\2\u01d7")
        buf.write(u"\u01d9\5&\24\2\u01d8\u01d6\3\2\2\2\u01d9\u01dc\3\2\2")
        buf.write(u"\2\u01da\u01d8\3\2\2\2\u01da\u01db\3\2\2\2\u01db+\3\2")
        buf.write(u"\2\2\u01dc\u01da\3\2\2\2\u01dd\u01de\5$\23\2\u01de-\3")
        buf.write(u"\2\2\2\u01df\u01e1\5\60\31\2\u01e0\u01df\3\2\2\2\u01e1")
        buf.write(u"\u01e2\3\2\2\2\u01e2\u01e0\3\2\2\2\u01e2\u01e3\3\2\2")
        buf.write(u"\2\u01e3\u01e5\3\2\2\2\u01e4\u01e6\5\62\32\2\u01e5\u01e4")
        buf.write(u"\3\2\2\2\u01e5\u01e6\3\2\2\2\u01e6\u01e7\3\2\2\2\u01e7")
        buf.write(u"\u01e8\7Y\2\2\u01e8\u01eb\3\2\2\2\u01e9\u01eb\5|?\2\u01ea")
        buf.write(u"\u01e0\3\2\2\2\u01ea\u01e9\3\2\2\2\u01eb/\3\2\2\2\u01ec")
        buf.write(u"\u01f2\5\66\34\2\u01ed\u01f2\58\35\2\u01ee\u01f2\5N(")
        buf.write(u"\2\u01ef\u01f2\5P)\2\u01f0\u01f2\5R*\2\u01f1\u01ec\3")
        buf.write(u"\2\2\2\u01f1\u01ed\3\2\2\2\u01f1\u01ee\3\2\2\2\u01f1")
        buf.write(u"\u01ef\3\2\2\2\u01f1\u01f0\3\2\2\2\u01f2\61\3\2\2\2\u01f3")
        buf.write(u"\u01f8\5\64\33\2\u01f4\u01f5\7Z\2\2\u01f5\u01f7\5\64")
        buf.write(u"\33\2\u01f6\u01f4\3\2\2\2\u01f7\u01fa\3\2\2\2\u01f8\u01f6")
        buf.write(u"\3\2\2\2\u01f8\u01f9\3\2\2\2\u01f9\63\3\2\2\2\u01fa\u01f8")
        buf.write(u"\3\2\2\2\u01fb\u0201\5T+\2\u01fc\u01fd\5T+\2\u01fd\u01fe")
        buf.write(u"\7[\2\2\u01fe\u01ff\5r:\2\u01ff\u0201\3\2\2\2\u0200\u01fb")
        buf.write(u"\3\2\2\2\u0200\u01fc\3\2\2\2\u0201\65\3\2\2\2\u0202\u0203")
        buf.write(u"\t\4\2\2\u0203\67\3\2\2\2\u0204\u0213\t\5\2\2\u0205\u0206")
        buf.write(u"\7\3\2\2\u0206\u0207\7=\2\2\u0207\u0208\t\6\2\2\u0208")
        buf.write(u"\u0213\7>\2\2\u0209\u0213\5L\'\2\u020a\u0213\5:\36\2")
        buf.write(u"\u020b\u0213\5F$\2\u020c\u0213\5p9\2\u020d\u020e\7\t")
        buf.write(u"\2\2\u020e\u020f\7=\2\2\u020f\u0210\5,\27\2\u0210\u0211")
        buf.write(u"\7>\2\2\u0211\u0213\3\2\2\2\u0212\u0204\3\2\2\2\u0212")
        buf.write(u"\u0205\3\2\2\2\u0212\u0209\3\2\2\2\u0212\u020a\3\2\2")
        buf.write(u"\2\u0212\u020b\3\2\2\2\u0212\u020c\3\2\2\2\u0212\u020d")
        buf.write(u"\3\2\2\2\u02139\3\2\2\2\u0214\u0216\5<\37\2\u0215\u0217")
        buf.write(u"\7k\2\2\u0216\u0215\3\2\2\2\u0216\u0217\3\2\2\2\u0217")
        buf.write(u"\u0218\3\2\2\2\u0218\u021a\7A\2\2\u0219\u021b\5> \2\u021a")
        buf.write(u"\u0219\3\2\2\2\u021b\u021c\3\2\2\2\u021c\u021a\3\2\2")
        buf.write(u"\2\u021c\u021d\3\2\2\2\u021d\u021e\3\2\2\2\u021e\u021f")
        buf.write(u"\7B\2\2\u021f\u0224\3\2\2\2\u0220\u0221\5<\37\2\u0221")
        buf.write(u"\u0222\7k\2\2\u0222\u0224\3\2\2\2\u0223\u0214\3\2\2\2")
        buf.write(u"\u0223\u0220\3\2\2\2\u0224;\3\2\2\2\u0225\u0226\t\7\2")
        buf.write(u"\2\u0226=\3\2\2\2\u0227\u0229\5@!\2\u0228\u022a\5B\"")
        buf.write(u"\2\u0229\u0228\3\2\2\2\u0229\u022a\3\2\2\2\u022a\u022b")
        buf.write(u"\3\2\2\2\u022b\u022c\7Y\2\2\u022c\u022f\3\2\2\2\u022d")
        buf.write(u"\u022f\5|?\2\u022e\u0227\3\2\2\2\u022e\u022d\3\2\2\2")
        buf.write(u"\u022f?\3\2\2\2\u0230\u0232\58\35\2\u0231\u0233\5@!\2")
        buf.write(u"\u0232\u0231\3\2\2\2\u0232\u0233\3\2\2\2\u0233\u0239")
        buf.write(u"\3\2\2\2\u0234\u0236\5N(\2\u0235\u0237\5@!\2\u0236\u0235")
        buf.write(u"\3\2\2\2\u0236\u0237\3\2\2\2\u0237\u0239\3\2\2\2\u0238")
        buf.write(u"\u0230\3\2\2\2\u0238\u0234\3\2\2\2\u0239A\3\2\2\2\u023a")
        buf.write(u"\u023f\5D#\2\u023b\u023c\7Z\2\2\u023c\u023e\5D#\2\u023d")
        buf.write(u"\u023b\3\2\2\2\u023e\u0241\3\2\2\2\u023f\u023d\3\2\2")
        buf.write(u"\2\u023f\u0240\3\2\2\2\u0240C\3\2\2\2\u0241\u023f\3\2")
        buf.write(u"\2\2\u0242\u0249\5T+\2\u0243\u0245\5T+\2\u0244\u0243")
        buf.write(u"\3\2\2\2\u0244\u0245\3\2\2\2\u0245\u0246\3\2\2\2\u0246")
        buf.write(u"\u0247\7X\2\2\u0247\u0249\5,\27\2\u0248\u0242\3\2\2\2")
        buf.write(u"\u0248\u0244\3\2\2\2\u0249E\3\2\2\2\u024a\u024c\7\33")
        buf.write(u"\2\2\u024b\u024d\7k\2\2\u024c\u024b\3\2\2\2\u024c\u024d")
        buf.write(u"\3\2\2\2\u024d\u024e\3\2\2\2\u024e\u024f\7A\2\2\u024f")
        buf.write(u"\u0250\5H%\2\u0250\u0251\7B\2\2\u0251\u025e\3\2\2\2\u0252")
        buf.write(u"\u0254\7\33\2\2\u0253\u0255\7k\2\2\u0254\u0253\3\2\2")
        buf.write(u"\2\u0254\u0255\3\2\2\2\u0255\u0256\3\2\2\2\u0256\u0257")
        buf.write(u"\7A\2\2\u0257\u0258\5H%\2\u0258\u0259\7Z\2\2\u0259\u025a")
        buf.write(u"\7B\2\2\u025a\u025e\3\2\2\2\u025b\u025c\7\33\2\2\u025c")
        buf.write(u"\u025e\7k\2\2\u025d\u024a\3\2\2\2\u025d\u0252\3\2\2\2")
        buf.write(u"\u025d\u025b\3\2\2\2\u025eG\3\2\2\2\u025f\u0264\5J&\2")
        buf.write(u"\u0260\u0261\7Z\2\2\u0261\u0263\5J&\2\u0262\u0260\3\2")
        buf.write(u"\2\2\u0263\u0266\3\2\2\2\u0264\u0262\3\2\2\2\u0264\u0265")
        buf.write(u"\3\2\2\2\u0265I\3\2\2\2\u0266\u0264\3\2\2\2\u0267\u026a")
        buf.write(u"\7k\2\2\u0268\u0269\7[\2\2\u0269\u026b\5,\27\2\u026a")
        buf.write(u"\u0268\3\2\2\2\u026a\u026b\3\2\2\2\u026bK\3\2\2\2\u026c")
        buf.write(u"\u026d\7\65\2\2\u026d\u026e\7=\2\2\u026e\u026f\5j\66")
        buf.write(u"\2\u026f\u0270\7>\2\2\u0270M\3\2\2\2\u0271\u0272\t\b")
        buf.write(u"\2\2\u0272O\3\2\2\2\u0273\u027a\t\t\2\2\u0274\u027a\5")
        buf.write(u"Z.\2\u0275\u0276\7\f\2\2\u0276\u0277\7=\2\2\u0277\u0278")
        buf.write(u"\7k\2\2\u0278\u027a\7>\2\2\u0279\u0273\3\2\2\2\u0279")
        buf.write(u"\u0274\3\2\2\2\u0279\u0275\3\2\2\2\u027aQ\3\2\2\2\u027b")
        buf.write(u"\u027c\7\63\2\2\u027c\u027d\7=\2\2\u027d\u027e\5j\66")
        buf.write(u"\2\u027e\u027f\7>\2\2\u027f\u0286\3\2\2\2\u0280\u0281")
        buf.write(u"\7\63\2\2\u0281\u0282\7=\2\2\u0282\u0283\5,\27\2\u0283")
        buf.write(u"\u0284\7>\2\2\u0284\u0286\3\2\2\2\u0285\u027b\3\2\2\2")
        buf.write(u"\u0285\u0280\3\2\2\2\u0286S\3\2\2\2\u0287\u0289\5b\62")
        buf.write(u"\2\u0288\u0287\3\2\2\2\u0288\u0289\3\2\2\2\u0289\u028a")
        buf.write(u"\3\2\2\2\u028a\u028e\5V,\2\u028b\u028d\5X-\2\u028c\u028b")
        buf.write(u"\3\2\2\2\u028d\u0290\3\2\2\2\u028e\u028c\3\2\2\2\u028e")
        buf.write(u"\u028f\3\2\2\2\u028fU\3\2\2\2\u0290\u028e\3\2\2\2\u0291")
        buf.write(u"\u0292\b,\1\2\u0292\u0298\7k\2\2\u0293\u0294\7=\2\2\u0294")
        buf.write(u"\u0295\5T+\2\u0295\u0296\7>\2\2\u0296\u0298\3\2\2\2\u0297")
        buf.write(u"\u0291\3\2\2\2\u0297\u0293\3\2\2\2\u0298\u02d3\3\2\2")
        buf.write(u"\2\u0299\u029a\f\b\2\2\u029a\u029e\7?\2\2\u029b\u029d")
        buf.write(u"\5N(\2\u029c\u029b\3\2\2\2\u029d\u02a0\3\2\2\2\u029e")
        buf.write(u"\u029c\3\2\2\2\u029e\u029f\3\2\2\2\u029f\u02a2\3\2\2")
        buf.write(u"\2\u02a0\u029e\3\2\2\2\u02a1\u02a3\5&\24\2\u02a2\u02a1")
        buf.write(u"\3\2\2\2\u02a2\u02a3\3\2\2\2\u02a3\u02a4\3\2\2\2\u02a4")
        buf.write(u"\u02d2\7@\2\2\u02a5\u02a6\f\7\2\2\u02a6\u02a7\7?\2\2")
        buf.write(u"\u02a7\u02ab\7*\2\2\u02a8\u02aa\5N(\2\u02a9\u02a8\3\2")
        buf.write(u"\2\2\u02aa\u02ad\3\2\2\2\u02ab\u02a9\3\2\2\2\u02ab\u02ac")
        buf.write(u"\3\2\2\2\u02ac\u02ae\3\2\2\2\u02ad\u02ab\3\2\2\2\u02ae")
        buf.write(u"\u02af\5&\24\2\u02af\u02b0\7@\2\2\u02b0\u02d2\3\2\2\2")
        buf.write(u"\u02b1\u02b2\f\6\2\2\u02b2\u02b4\7?\2\2\u02b3\u02b5\5")
        buf.write(u"N(\2\u02b4\u02b3\3\2\2\2\u02b5\u02b6\3\2\2\2\u02b6\u02b4")
        buf.write(u"\3\2\2\2\u02b6\u02b7\3\2\2\2\u02b7\u02b8\3\2\2\2\u02b8")
        buf.write(u"\u02b9\7*\2\2\u02b9\u02ba\5&\24\2\u02ba\u02bb\7@\2\2")
        buf.write(u"\u02bb\u02d2\3\2\2\2\u02bc\u02bd\f\5\2\2\u02bd\u02c1")
        buf.write(u"\7?\2\2\u02be\u02c0\5N(\2\u02bf\u02be\3\2\2\2\u02c0\u02c3")
        buf.write(u"\3\2\2\2\u02c1\u02bf\3\2\2\2\u02c1\u02c2\3\2\2\2\u02c2")
        buf.write(u"\u02c4\3\2\2\2\u02c3\u02c1\3\2\2\2\u02c4\u02c5\7M\2\2")
        buf.write(u"\u02c5\u02d2\7@\2\2\u02c6\u02c7\f\4\2\2\u02c7\u02c8\7")
        buf.write(u"=\2\2\u02c8\u02c9\5d\63\2\u02c9\u02ca\7>\2\2\u02ca\u02d2")
        buf.write(u"\3\2\2\2\u02cb\u02cc\f\3\2\2\u02cc\u02ce\7=\2\2\u02cd")
        buf.write(u"\u02cf\5h\65\2\u02ce\u02cd\3\2\2\2\u02ce\u02cf\3\2\2")
        buf.write(u"\2\u02cf\u02d0\3\2\2\2\u02d0\u02d2\7>\2\2\u02d1\u0299")
        buf.write(u"\3\2\2\2\u02d1\u02a5\3\2\2\2\u02d1\u02b1\3\2\2\2\u02d1")
        buf.write(u"\u02bc\3\2\2\2\u02d1\u02c6\3\2\2\2\u02d1\u02cb\3\2\2")
        buf.write(u"\2\u02d2\u02d5\3\2\2\2\u02d3\u02d1\3\2\2\2\u02d3\u02d4")
        buf.write(u"\3\2\2\2\u02d4W\3\2\2\2\u02d5\u02d3\3\2\2\2\u02d6\u02d7")
        buf.write(u"\7\r\2\2\u02d7\u02d9\7=\2\2\u02d8\u02da\7m\2\2\u02d9")
        buf.write(u"\u02d8\3\2\2\2\u02da\u02db\3\2\2\2\u02db\u02d9\3\2\2")
        buf.write(u"\2\u02db\u02dc\3\2\2\2\u02dc\u02dd\3\2\2\2\u02dd\u02e0")
        buf.write(u"\7>\2\2\u02de\u02e0\5Z.\2\u02df\u02d6\3\2\2\2\u02df\u02de")
        buf.write(u"\3\2\2\2\u02e0Y\3\2\2\2\u02e1\u02e2\7\16\2\2\u02e2\u02e3")
        buf.write(u"\7=\2\2\u02e3\u02e4\7=\2\2\u02e4\u02e5\5\\/\2\u02e5\u02e6")
        buf.write(u"\7>\2\2\u02e6\u02e7\7>\2\2\u02e7[\3\2\2\2\u02e8\u02ed")
        buf.write(u"\5^\60\2\u02e9\u02ea\7Z\2\2\u02ea\u02ec\5^\60\2\u02eb")
        buf.write(u"\u02e9\3\2\2\2\u02ec\u02ef\3\2\2\2\u02ed\u02eb\3\2\2")
        buf.write(u"\2\u02ed\u02ee\3\2\2\2\u02ee]\3\2\2\2\u02ef\u02ed\3\2")
        buf.write(u"\2\2\u02f0\u02f6\n\n\2\2\u02f1\u02f3\7=\2\2\u02f2\u02f4")
        buf.write(u"\5\b\5\2\u02f3\u02f2\3\2\2\2\u02f3\u02f4\3\2\2\2\u02f4")
        buf.write(u"\u02f5\3\2\2\2\u02f5\u02f7\7>\2\2\u02f6\u02f1\3\2\2\2")
        buf.write(u"\u02f6\u02f7\3\2\2\2\u02f7\u02fa\3\2\2\2\u02f8\u02fa")
        buf.write(u"\3\2\2\2\u02f9\u02f0\3\2\2\2\u02f9\u02f8\3\2\2\2\u02fa")
        buf.write(u"_\3\2\2\2\u02fb\u0301\n\13\2\2\u02fc\u02fd\7=\2\2\u02fd")
        buf.write(u"\u02fe\5`\61\2\u02fe\u02ff\7>\2\2\u02ff\u0301\3\2\2\2")
        buf.write(u"\u0300\u02fb\3\2\2\2\u0300\u02fc\3\2\2\2\u0301\u0304")
        buf.write(u"\3\2\2\2\u0302\u0300\3\2\2\2\u0302\u0303\3\2\2\2\u0303")
        buf.write(u"a\3\2\2\2\u0304\u0302\3\2\2\2\u0305\u0309\7M\2\2\u0306")
        buf.write(u"\u0308\5N(\2\u0307\u0306\3\2\2\2\u0308\u030b\3\2\2\2")
        buf.write(u"\u0309\u0307\3\2\2\2\u0309\u030a\3\2\2\2\u030a\u0324")
        buf.write(u"\3\2\2\2\u030b\u0309\3\2\2\2\u030c\u0310\7M\2\2\u030d")
        buf.write(u"\u030f\5N(\2\u030e\u030d\3\2\2\2\u030f\u0312\3\2\2\2")
        buf.write(u"\u0310\u030e\3\2\2\2\u0310\u0311\3\2\2\2\u0311\u0313")
        buf.write(u"\3\2\2\2\u0312\u0310\3\2\2\2\u0313\u0324\5b\62\2\u0314")
        buf.write(u"\u0318\7T\2\2\u0315\u0317\5N(\2\u0316\u0315\3\2\2\2\u0317")
        buf.write(u"\u031a\3\2\2\2\u0318\u0316\3\2\2\2\u0318\u0319\3\2\2")
        buf.write(u"\2\u0319\u0324\3\2\2\2\u031a\u0318\3\2\2\2\u031b\u031f")
        buf.write(u"\7T\2\2\u031c\u031e\5N(\2\u031d\u031c\3\2\2\2\u031e\u0321")
        buf.write(u"\3\2\2\2\u031f\u031d\3\2\2\2\u031f\u0320\3\2\2\2\u0320")
        buf.write(u"\u0322\3\2\2\2\u0321\u031f\3\2\2\2\u0322\u0324\5b\62")
        buf.write(u"\2\u0323\u0305\3\2\2\2\u0323\u030c\3\2\2\2\u0323\u0314")
        buf.write(u"\3\2\2\2\u0323\u031b\3\2\2\2\u0324c\3\2\2\2\u0325\u032a")
        buf.write(u"\5f\64\2\u0326\u0327\7Z\2\2\u0327\u0329\5f\64\2\u0328")
        buf.write(u"\u0326\3\2\2\2\u0329\u032c\3\2\2\2\u032a\u0328\3\2\2")
        buf.write(u"\2\u032a\u032b\3\2\2\2\u032b\u032f\3\2\2\2\u032c\u032a")
        buf.write(u"\3\2\2\2\u032d\u032e\7Z\2\2\u032e\u0330\7j\2\2\u032f")
        buf.write(u"\u032d\3\2\2\2\u032f\u0330\3\2\2\2\u0330e\3\2\2\2\u0331")
        buf.write(u"\u0333\5\60\31\2\u0332\u0331\3\2\2\2\u0333\u0334\3\2")
        buf.write(u"\2\2\u0334\u0332\3\2\2\2\u0334\u0335\3\2\2\2\u0335\u0336")
        buf.write(u"\3\2\2\2\u0336\u0337\5T+\2\u0337\u0341\3\2\2\2\u0338")
        buf.write(u"\u033a\5\60\31\2\u0339\u0338\3\2\2\2\u033a\u033b\3\2")
        buf.write(u"\2\2\u033b\u0339\3\2\2\2\u033b\u033c\3\2\2\2\u033c\u033e")
        buf.write(u"\3\2\2\2\u033d\u033f\5l\67\2\u033e\u033d\3\2\2\2\u033e")
        buf.write(u"\u033f\3\2\2\2\u033f\u0341\3\2\2\2\u0340\u0332\3\2\2")
        buf.write(u"\2\u0340\u0339\3\2\2\2\u0341g\3\2\2\2\u0342\u0347\7k")
        buf.write(u"\2\2\u0343\u0344\7Z\2\2\u0344\u0346\7k\2\2\u0345\u0343")
        buf.write(u"\3\2\2\2\u0346\u0349\3\2\2\2\u0347\u0345\3\2\2\2\u0347")
        buf.write(u"\u0348\3\2\2\2\u0348i\3\2\2\2\u0349\u0347\3\2\2\2\u034a")
        buf.write(u"\u034c\5@!\2\u034b\u034d\5l\67\2\u034c\u034b\3\2\2\2")
        buf.write(u"\u034c\u034d\3\2\2\2\u034dk\3\2\2\2\u034e\u035a\5b\62")
        buf.write(u"\2\u034f\u0351\5b\62\2\u0350\u034f\3\2\2\2\u0350\u0351")
        buf.write(u"\3\2\2\2\u0351\u0352\3\2\2\2\u0352\u0356\5n8\2\u0353")
        buf.write(u"\u0355\5X-\2\u0354\u0353\3\2\2\2\u0355\u0358\3\2\2\2")
        buf.write(u"\u0356\u0354\3\2\2\2\u0356\u0357\3\2\2\2\u0357\u035a")
        buf.write(u"\3\2\2\2\u0358\u0356\3\2\2\2\u0359\u034e\3\2\2\2\u0359")
        buf.write(u"\u0350\3\2\2\2\u035am\3\2\2\2\u035b\u035c\b8\1\2\u035c")
        buf.write(u"\u035d\7=\2\2\u035d\u035e\5l\67\2\u035e\u0362\7>\2\2")
        buf.write(u"\u035f\u0361\5X-\2\u0360\u035f\3\2\2\2\u0361\u0364\3")
        buf.write(u"\2\2\2\u0362\u0360\3\2\2\2\u0362\u0363\3\2\2\2\u0363")
        buf.write(u"\u0395\3\2\2\2\u0364\u0362\3\2\2\2\u0365\u0369\7?\2\2")
        buf.write(u"\u0366\u0368\5N(\2\u0367\u0366\3\2\2\2\u0368\u036b\3")
        buf.write(u"\2\2\2\u0369\u0367\3\2\2\2\u0369\u036a\3\2\2\2\u036a")
        buf.write(u"\u036d\3\2\2\2\u036b\u0369\3\2\2\2\u036c\u036e\5&\24")
        buf.write(u"\2\u036d\u036c\3\2\2\2\u036d\u036e\3\2\2\2\u036e\u036f")
        buf.write(u"\3\2\2\2\u036f\u0395\7@\2\2\u0370\u0371\7?\2\2\u0371")
        buf.write(u"\u0375\7*\2\2\u0372\u0374\5N(\2\u0373\u0372\3\2\2\2\u0374")
        buf.write(u"\u0377\3\2\2\2\u0375\u0373\3\2\2\2\u0375\u0376\3\2\2")
        buf.write(u"\2\u0376\u0378\3\2\2\2\u0377\u0375\3\2\2\2\u0378\u0379")
        buf.write(u"\5&\24\2\u0379\u037a\7@\2\2\u037a\u0395\3\2\2\2\u037b")
        buf.write(u"\u037f\7?\2\2\u037c\u037e\5N(\2\u037d\u037c\3\2\2\2\u037e")
        buf.write(u"\u0381\3\2\2\2\u037f\u037d\3\2\2\2\u037f\u0380\3\2\2")
        buf.write(u"\2\u0380\u0382\3\2\2\2\u0381\u037f\3\2\2\2\u0382\u0383")
        buf.write(u"\7*\2\2\u0383\u0384\5&\24\2\u0384\u0385\7@\2\2\u0385")
        buf.write(u"\u0395\3\2\2\2\u0386\u0387\7?\2\2\u0387\u0388\7M\2\2")
        buf.write(u"\u0388\u0395\7@\2\2\u0389\u038b\7=\2\2\u038a\u038c\5")
        buf.write(u"d\63\2\u038b\u038a\3\2\2\2\u038b\u038c\3\2\2\2\u038c")
        buf.write(u"\u038d\3\2\2\2\u038d\u0391\7>\2\2\u038e\u0390\5X-\2\u038f")
        buf.write(u"\u038e\3\2\2\2\u0390\u0393\3\2\2\2\u0391\u038f\3\2\2")
        buf.write(u"\2\u0391\u0392\3\2\2\2\u0392\u0395\3\2\2\2\u0393\u0391")
        buf.write(u"\3\2\2\2\u0394\u035b\3\2\2\2\u0394\u0365\3\2\2\2\u0394")
        buf.write(u"\u0370\3\2\2\2\u0394\u037b\3\2\2\2\u0394\u0386\3\2\2")
        buf.write(u"\2\u0394\u0389\3\2\2\2\u0395\u03cb\3\2\2\2\u0396\u0397")
        buf.write(u"\f\7\2\2\u0397\u039b\7?\2\2\u0398\u039a\5N(\2\u0399\u0398")
        buf.write(u"\3\2\2\2\u039a\u039d\3\2\2\2\u039b\u0399\3\2\2\2\u039b")
        buf.write(u"\u039c\3\2\2\2\u039c\u039f\3\2\2\2\u039d\u039b\3\2\2")
        buf.write(u"\2\u039e\u03a0\5&\24\2\u039f\u039e\3\2\2\2\u039f\u03a0")
        buf.write(u"\3\2\2\2\u03a0\u03a1\3\2\2\2\u03a1\u03ca\7@\2\2\u03a2")
        buf.write(u"\u03a3\f\6\2\2\u03a3\u03a4\7?\2\2\u03a4\u03a8\7*\2\2")
        buf.write(u"\u03a5\u03a7\5N(\2\u03a6\u03a5\3\2\2\2\u03a7\u03aa\3")
        buf.write(u"\2\2\2\u03a8\u03a6\3\2\2\2\u03a8\u03a9\3\2\2\2\u03a9")
        buf.write(u"\u03ab\3\2\2\2\u03aa\u03a8\3\2\2\2\u03ab\u03ac\5&\24")
        buf.write(u"\2\u03ac\u03ad\7@\2\2\u03ad\u03ca\3\2\2\2\u03ae\u03af")
        buf.write(u"\f\5\2\2\u03af\u03b1\7?\2\2\u03b0\u03b2\5N(\2\u03b1\u03b0")
        buf.write(u"\3\2\2\2\u03b2\u03b3\3\2\2\2\u03b3\u03b1\3\2\2\2\u03b3")
        buf.write(u"\u03b4\3\2\2\2\u03b4\u03b5\3\2\2\2\u03b5\u03b6\7*\2\2")
        buf.write(u"\u03b6\u03b7\5&\24\2\u03b7\u03b8\7@\2\2\u03b8\u03ca\3")
        buf.write(u"\2\2\2\u03b9\u03ba\f\4\2\2\u03ba\u03bb\7?\2\2\u03bb\u03bc")
        buf.write(u"\7M\2\2\u03bc\u03ca\7@\2\2\u03bd\u03be\f\3\2\2\u03be")
        buf.write(u"\u03c0\7=\2\2\u03bf\u03c1\5d\63\2\u03c0\u03bf\3\2\2\2")
        buf.write(u"\u03c0\u03c1\3\2\2\2\u03c1\u03c2\3\2\2\2\u03c2\u03c6")
        buf.write(u"\7>\2\2\u03c3\u03c5\5X-\2\u03c4\u03c3\3\2\2\2\u03c5\u03c8")
        buf.write(u"\3\2\2\2\u03c6\u03c4\3\2\2\2\u03c6\u03c7\3\2\2\2\u03c7")
        buf.write(u"\u03ca\3\2\2\2\u03c8\u03c6\3\2\2\2\u03c9\u0396\3\2\2")
        buf.write(u"\2\u03c9\u03a2\3\2\2\2\u03c9\u03ae\3\2\2\2\u03c9\u03b9")
        buf.write(u"\3\2\2\2\u03c9\u03bd\3\2\2\2\u03ca\u03cd\3\2\2\2\u03cb")
        buf.write(u"\u03c9\3\2\2\2\u03cb\u03cc\3\2\2\2\u03cco\3\2\2\2\u03cd")
        buf.write(u"\u03cb\3\2\2\2\u03ce\u03cf\7k\2\2\u03cfq\3\2\2\2\u03d0")
        buf.write(u"\u03db\5&\24\2\u03d1\u03d2\7A\2\2\u03d2\u03d3\5t;\2\u03d3")
        buf.write(u"\u03d4\7B\2\2\u03d4\u03db\3\2\2\2\u03d5\u03d6\7A\2\2")
        buf.write(u"\u03d6\u03d7\5t;\2\u03d7\u03d8\7Z\2\2\u03d8\u03d9\7B")
        buf.write(u"\2\2\u03d9\u03db\3\2\2\2\u03da\u03d0\3\2\2\2\u03da\u03d1")
        buf.write(u"\3\2\2\2\u03da\u03d5\3\2\2\2\u03dbs\3\2\2\2\u03dc\u03de")
        buf.write(u"\b;\1\2\u03dd\u03df\5v<\2\u03de\u03dd\3\2\2\2\u03de\u03df")
        buf.write(u"\3\2\2\2\u03df\u03e0\3\2\2\2\u03e0\u03e1\5r:\2\u03e1")
        buf.write(u"\u03ea\3\2\2\2\u03e2\u03e3\f\3\2\2\u03e3\u03e5\7Z\2\2")
        buf.write(u"\u03e4\u03e6\5v<\2\u03e5\u03e4\3\2\2\2\u03e5\u03e6\3")
        buf.write(u"\2\2\2\u03e6\u03e7\3\2\2\2\u03e7\u03e9\5r:\2\u03e8\u03e2")
        buf.write(u"\3\2\2\2\u03e9\u03ec\3\2\2\2\u03ea\u03e8\3\2\2\2\u03ea")
        buf.write(u"\u03eb\3\2\2\2\u03ebu\3\2\2\2\u03ec\u03ea\3\2\2\2\u03ed")
        buf.write(u"\u03ee\5x=\2\u03ee\u03ef\7[\2\2\u03efw\3\2\2\2\u03f0")
        buf.write(u"\u03f2\5z>\2\u03f1\u03f0\3\2\2\2\u03f2\u03f3\3\2\2\2")
        buf.write(u"\u03f3\u03f1\3\2\2\2\u03f3\u03f4\3\2\2\2\u03f4y\3\2\2")
        buf.write(u"\2\u03f5\u03f6\7?\2\2\u03f6\u03f7\5,\27\2\u03f7\u03f8")
        buf.write(u"\7@\2\2\u03f8\u03fc\3\2\2\2\u03f9\u03fa\7i\2\2\u03fa")
        buf.write(u"\u03fc\7k\2\2\u03fb\u03f5\3\2\2\2\u03fb\u03f9\3\2\2\2")
        buf.write(u"\u03fc{\3\2\2\2\u03fd\u03fe\7;\2\2\u03fe\u03ff\7=\2\2")
        buf.write(u"\u03ff\u0400\5,\27\2\u0400\u0402\7Z\2\2\u0401\u0403\7")
        buf.write(u"m\2\2\u0402\u0401\3\2\2\2\u0403\u0404\3\2\2\2\u0404\u0402")
        buf.write(u"\3\2\2\2\u0404\u0405\3\2\2\2\u0405\u0406\3\2\2\2\u0406")
        buf.write(u"\u0407\7>\2\2\u0407\u0408\7Y\2\2\u0408}\3\2\2\2\u0409")
        buf.write(u"\u042f\5\u0080A\2\u040a\u042f\5\u0082B\2\u040b\u042f")
        buf.write(u"\5\u0088E\2\u040c\u042f\5\u008aF\2\u040d\u042f\5\u008c")
        buf.write(u"G\2\u040e\u042f\5\u008eH\2\u040f\u0410\t\f\2\2\u0410")
        buf.write(u"\u0411\t\r\2\2\u0411\u041a\7=\2\2\u0412\u0417\5\"\22")
        buf.write(u"\2\u0413\u0414\7Z\2\2\u0414\u0416\5\"\22\2\u0415\u0413")
        buf.write(u"\3\2\2\2\u0416\u0419\3\2\2\2\u0417\u0415\3\2\2\2\u0417")
        buf.write(u"\u0418\3\2\2\2\u0418\u041b\3\2\2\2\u0419\u0417\3\2\2")
        buf.write(u"\2\u041a\u0412\3\2\2\2\u041a\u041b\3\2\2\2\u041b\u0429")
        buf.write(u"\3\2\2\2\u041c\u0425\7X\2\2\u041d\u0422\5\"\22\2\u041e")
        buf.write(u"\u041f\7Z\2\2\u041f\u0421\5\"\22\2\u0420\u041e\3\2\2")
        buf.write(u"\2\u0421\u0424\3\2\2\2\u0422\u0420\3\2\2\2\u0422\u0423")
        buf.write(u"\3\2\2\2\u0423\u0426\3\2\2\2\u0424\u0422\3\2\2\2\u0425")
        buf.write(u"\u041d\3\2\2\2\u0425\u0426\3\2\2\2\u0426\u0428\3\2\2")
        buf.write(u"\2\u0427\u041c\3\2\2\2\u0428\u042b\3\2\2\2\u0429\u0427")
        buf.write(u"\3\2\2\2\u0429\u042a\3\2\2\2\u042a\u042c\3\2\2\2\u042b")
        buf.write(u"\u0429\3\2\2\2\u042c\u042d\7>\2\2\u042d\u042f\7Y\2\2")
        buf.write(u"\u042e\u0409\3\2\2\2\u042e\u040a\3\2\2\2\u042e\u040b")
        buf.write(u"\3\2\2\2\u042e\u040c\3\2\2\2\u042e\u040d\3\2\2\2\u042e")
        buf.write(u"\u040e\3\2\2\2\u042e\u040f\3\2\2\2\u042f\177\3\2\2\2")
        buf.write(u"\u0430\u0431\7k\2\2\u0431\u0432\7X\2\2\u0432\u043c\5")
        buf.write(u"~@\2\u0433\u0434\7\23\2\2\u0434\u0435\5,\27\2\u0435\u0436")
        buf.write(u"\7X\2\2\u0436\u0437\5~@\2\u0437\u043c\3\2\2\2\u0438\u0439")
        buf.write(u"\7\27\2\2\u0439\u043a\7X\2\2\u043a\u043c\5~@\2\u043b")
        buf.write(u"\u0430\3\2\2\2\u043b\u0433\3\2\2\2\u043b\u0438\3\2\2")
        buf.write(u"\2\u043c\u0081\3\2\2\2\u043d\u043f\7A\2\2\u043e\u0440")
        buf.write(u"\5\u0084C\2\u043f\u043e\3\2\2\2\u043f\u0440\3\2\2\2\u0440")
        buf.write(u"\u0441\3\2\2\2\u0441\u0442\7B\2\2\u0442\u0083\3\2\2\2")
        buf.write(u"\u0443\u0445\5\u0086D\2\u0444\u0443\3\2\2\2\u0445\u0446")
        buf.write(u"\3\2\2\2\u0446\u0444\3\2\2\2\u0446\u0447\3\2\2\2\u0447")
        buf.write(u"\u0085\3\2\2\2\u0448\u044b\5.\30\2\u0449\u044b\5~@\2")
        buf.write(u"\u044a\u0448\3\2\2\2\u044a\u0449\3\2\2\2\u044b\u0087")
        buf.write(u"\3\2\2\2\u044c\u044e\5*\26\2\u044d\u044c\3\2\2\2\u044d")
        buf.write(u"\u044e\3\2\2\2\u044e\u044f\3\2\2\2\u044f\u0450\7Y\2\2")
        buf.write(u"\u0450\u0089\3\2\2\2\u0451\u0452\7 \2\2\u0452\u0453\7")
        buf.write(u"=\2\2\u0453\u0454\5*\26\2\u0454\u0455\7>\2\2\u0455\u0458")
        buf.write(u"\5~@\2\u0456\u0457\7\32\2\2\u0457\u0459\5~@\2\u0458\u0456")
        buf.write(u"\3\2\2\2\u0458\u0459\3\2\2\2\u0459\u0461\3\2\2\2\u045a")
        buf.write(u"\u045b\7,\2\2\u045b\u045c\7=\2\2\u045c\u045d\5*\26\2")
        buf.write(u"\u045d\u045e\7>\2\2\u045e\u045f\5~@\2\u045f\u0461\3\2")
        buf.write(u"\2\2\u0460\u0451\3\2\2\2\u0460\u045a\3\2\2\2\u0461\u008b")
        buf.write(u"\3\2\2\2\u0462\u0463\7\62\2\2\u0463\u0464\7=\2\2\u0464")
        buf.write(u"\u0465\5*\26\2\u0465\u0466\7>\2\2\u0466\u0467\5~@\2\u0467")
        buf.write(u"\u048d\3\2\2\2\u0468\u0469\7\30\2\2\u0469\u046a\5~@\2")
        buf.write(u"\u046a\u046b\7\62\2\2\u046b\u046c\7=\2\2\u046c\u046d")
        buf.write(u"\5*\26\2\u046d\u046e\7>\2\2\u046e\u046f\7Y\2\2\u046f")
        buf.write(u"\u048d\3\2\2\2\u0470\u0471\7\36\2\2\u0471\u0473\7=\2")
        buf.write(u"\2\u0472\u0474\5*\26\2\u0473\u0472\3\2\2\2\u0473\u0474")
        buf.write(u"\3\2\2\2\u0474\u0475\3\2\2\2\u0475\u0477\7Y\2\2\u0476")
        buf.write(u"\u0478\5*\26\2\u0477\u0476\3\2\2\2\u0477\u0478\3\2\2")
        buf.write(u"\2\u0478\u0479\3\2\2\2\u0479\u047b\7Y\2\2\u047a\u047c")
        buf.write(u"\5*\26\2\u047b\u047a\3\2\2\2\u047b\u047c\3\2\2\2\u047c")
        buf.write(u"\u047d\3\2\2\2\u047d\u047e\7>\2\2\u047e\u048d\5~@\2\u047f")
        buf.write(u"\u0480\7\36\2\2\u0480\u0481\7=\2\2\u0481\u0483\5.\30")
        buf.write(u"\2\u0482\u0484\5*\26\2\u0483\u0482\3\2\2\2\u0483\u0484")
        buf.write(u"\3\2\2\2\u0484\u0485\3\2\2\2\u0485\u0487\7Y\2\2\u0486")
        buf.write(u"\u0488\5*\26\2\u0487\u0486\3\2\2\2\u0487\u0488\3\2\2")
        buf.write(u"\2\u0488\u0489\3\2\2\2\u0489\u048a\7>\2\2\u048a\u048b")
        buf.write(u"\5~@\2\u048b\u048d\3\2\2\2\u048c\u0462\3\2\2\2\u048c")
        buf.write(u"\u0468\3\2\2\2\u048c\u0470\3\2\2\2\u048c\u047f\3\2\2")
        buf.write(u"\2\u048d\u008d\3\2\2\2\u048e\u048f\7\37\2\2\u048f\u0490")
        buf.write(u"\7k\2\2\u0490\u049f\7Y\2\2\u0491\u0492\7\26\2\2\u0492")
        buf.write(u"\u049f\7Y\2\2\u0493\u0494\7\22\2\2\u0494\u049f\7Y\2\2")
        buf.write(u"\u0495\u0497\7&\2\2\u0496\u0498\5*\26\2\u0497\u0496\3")
        buf.write(u"\2\2\2\u0497\u0498\3\2\2\2\u0498\u0499\3\2\2\2\u0499")
        buf.write(u"\u049f\7Y\2\2\u049a\u049b\7\37\2\2\u049b\u049c\5\n\6")
        buf.write(u"\2\u049c\u049d\7Y\2\2\u049d\u049f\3\2\2\2\u049e\u048e")
        buf.write(u"\3\2\2\2\u049e\u0491\3\2\2\2\u049e\u0493\3\2\2\2\u049e")
        buf.write(u"\u0495\3\2\2\2\u049e\u049a\3\2\2\2\u049f\u008f\3\2\2")
        buf.write(u"\2\u04a0\u04a2\5\u0092J\2\u04a1\u04a0\3\2\2\2\u04a1\u04a2")
        buf.write(u"\3\2\2\2\u04a2\u04a3\3\2\2\2\u04a3\u04a4\7\2\2\3\u04a4")
        buf.write(u"\u0091\3\2\2\2\u04a5\u04a7\5\u0094K\2\u04a6\u04a5\3\2")
        buf.write(u"\2\2\u04a7\u04a8\3\2\2\2\u04a8\u04a6\3\2\2\2\u04a8\u04a9")
        buf.write(u"\3\2\2\2\u04a9\u0093\3\2\2\2\u04aa\u04ae\5\u0096L\2\u04ab")
        buf.write(u"\u04ae\5.\30\2\u04ac\u04ae\7Y\2\2\u04ad\u04aa\3\2\2\2")
        buf.write(u"\u04ad\u04ab\3\2\2\2\u04ad\u04ac\3\2\2\2\u04ae\u0095")
        buf.write(u"\3\2\2\2\u04af\u04b1\5\60\31\2\u04b0\u04af\3\2\2\2\u04b1")
        buf.write(u"\u04b4\3\2\2\2\u04b2\u04b0\3\2\2\2\u04b2\u04b3\3\2\2")
        buf.write(u"\2\u04b3\u04b5\3\2\2\2\u04b4\u04b2\3\2\2\2\u04b5\u04b7")
        buf.write(u"\5T+\2\u04b6\u04b8\5\u0098M\2\u04b7\u04b6\3\2\2\2\u04b7")
        buf.write(u"\u04b8\3\2\2\2\u04b8\u04b9\3\2\2\2\u04b9\u04ba\5\u0082")
        buf.write(u"B\2\u04ba\u0097\3\2\2\2\u04bb\u04bd\5.\30\2\u04bc\u04bb")
        buf.write(u"\3\2\2\2\u04bd\u04be\3\2\2\2\u04be\u04bc\3\2\2\2\u04be")
        buf.write(u"\u04bf\3\2\2\2\u04bf\u0099\3\2\2\2\u008f\u009f\u00ae")
        buf.write(u"\u00b4\u00c8\u00d1\u00f5\u00ff\u010c\u010e\u0116\u012f")
        buf.write(u"\u0135\u013c\u014a\u014c\u0158\u015a\u0166\u0168\u017a")
        buf.write(u"\u017c\u0188\u018a\u0195\u01a0\u01ab\u01b6\u01c1\u01ca")
        buf.write(u"\u01d1\u01da\u01e2\u01e5\u01ea\u01f1\u01f8\u0200\u0212")
        buf.write(u"\u0216\u021c\u0223\u0229\u022e\u0232\u0236\u0238\u023f")
        buf.write(u"\u0244\u0248\u024c\u0254\u025d\u0264\u026a\u0279\u0285")
        buf.write(u"\u0288\u028e\u0297\u029e\u02a2\u02ab\u02b6\u02c1\u02ce")
        buf.write(u"\u02d1\u02d3\u02db\u02df\u02ed\u02f3\u02f6\u02f9\u0300")
        buf.write(u"\u0302\u0309\u0310\u0318\u031f\u0323\u032a\u032f\u0334")
        buf.write(u"\u033b\u033e\u0340\u0347\u034c\u0350\u0356\u0359\u0362")
        buf.write(u"\u0369\u036d\u0375\u037f\u038b\u0391\u0394\u039b\u039f")
        buf.write(u"\u03a8\u03b3\u03c0\u03c6\u03c9\u03cb\u03da\u03de\u03e5")
        buf.write(u"\u03ea\u03f3\u03fb\u0404\u0417\u041a\u0422\u0425\u0429")
        buf.write(u"\u042e\u043b\u043f\u0446\u044a\u044d\u0458\u0460\u0473")
        buf.write(u"\u0477\u047b\u0483\u0487\u048c\u0497\u049e\u04a1\u04a8")
        buf.write(u"\u04ad\u04b2\u04b7\u04be")
        return buf.getvalue()


class CParser ( Parser ):

    grammarFileName = "java-escape"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ u"<INVALID>", u"'__extension__'", u"'__builtin_va_arg'", 
                     u"'__builtin_offsetof'", u"'__m128'", u"'__m128d'", 
                     u"'__m128i'", u"'__typeof__'", u"'__inline__'", u"'__stdcall'", 
                     u"'__declspec'", u"'__asm'", u"'__attribute__'", u"'__asm__'", 
                     u"'__volatile__'", u"'auto'", u"'break'", u"'case'", 
                     u"'char'", u"'const'", u"'continue'", u"'default'", 
                     u"'do'", u"'double'", u"'else'", u"'enum'", u"'extern'", 
                     u"'float'", u"'for'", u"'goto'", u"'if'", u"'inline'", 
                     u"'int'", u"'long'", u"'register'", u"'restrict'", 
                     u"'return'", u"'short'", u"'signed'", u"'sizeof'", 
                     u"'static'", u"'struct'", u"'switch'", u"'typedef'", 
                     u"'union'", u"'unsigned'", u"'void'", u"'volatile'", 
                     u"'while'", u"'_Alignas'", u"'_Alignof'", u"'_Atomic'", 
                     u"'_Bool'", u"'_Complex'", u"'_Generic'", u"'_Imaginary'", 
                     u"'_Noreturn'", u"'_Static_assert'", u"'_Thread_local'", 
                     u"'('", u"')'", u"'['", u"']'", u"'{'", u"'}'", u"'<'", 
                     u"'<='", u"'>'", u"'>='", u"'<<'", u"'>>'", u"'+'", 
                     u"'++'", u"'-'", u"'--'", u"'*'", u"'/'", u"'%'", u"'&'", 
                     u"'|'", u"'&&'", u"'||'", u"'^'", u"'!'", u"'~'", u"'?'", 
                     u"':'", u"';'", u"','", u"'='", u"'*='", u"'/='", u"'%='", 
                     u"'+='", u"'-='", u"'<<='", u"'>>='", u"'&='", u"'^='", 
                     u"'|='", u"'=='", u"'!='", u"'->'", u"'.'", u"'...'" ]

    symbolicNames = [ u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"<INVALID>", 
                      u"<INVALID>", u"<INVALID>", u"<INVALID>", u"Auto", 
                      u"Break", u"Case", u"Char", u"Const", u"Continue", 
                      u"Default", u"Do", u"Double", u"Else", u"Enum", u"Extern", 
                      u"Float", u"For", u"Goto", u"If", u"Inline", u"Int", 
                      u"Long", u"Register", u"Restrict", u"Return", u"Short", 
                      u"Signed", u"Sizeof", u"Static", u"Struct", u"Switch", 
                      u"Typedef", u"Union", u"Unsigned", u"Void", u"Volatile", 
                      u"While", u"Alignas", u"Alignof", u"Atomic", u"Bool", 
                      u"Complex", u"Generic", u"Imaginary", u"Noreturn", 
                      u"StaticAssert", u"ThreadLocal", u"LeftParen", u"RightParen", 
                      u"LeftBracket", u"RightBracket", u"LeftBrace", u"RightBrace", 
                      u"Less", u"LessEqual", u"Greater", u"GreaterEqual", 
                      u"LeftShift", u"RightShift", u"Plus", u"PlusPlus", 
                      u"Minus", u"MinusMinus", u"Star", u"Div", u"Mod", 
                      u"And", u"Or", u"AndAnd", u"OrOr", u"Caret", u"Not", 
                      u"Tilde", u"Question", u"Colon", u"Semi", u"Comma", 
                      u"Assign", u"StarAssign", u"DivAssign", u"ModAssign", 
                      u"PlusAssign", u"MinusAssign", u"LeftShiftAssign", 
                      u"RightShiftAssign", u"AndAssign", u"XorAssign", u"OrAssign", 
                      u"Equal", u"NotEqual", u"Arrow", u"Dot", u"Ellipsis", 
                      u"Identifier", u"Constant", u"StringLiteral", u"LineDirective", 
                      u"PragmaDirective", u"Whitespace", u"Newline", u"BlockComment", 
                      u"LineComment" ]

    RULE_primaryExpression = 0
    RULE_genericAssociation = 1
    RULE_postfixExpression = 2
    RULE_argumentExpressionList = 3
    RULE_unaryExpression = 4
    RULE_unaryOperator = 5
    RULE_castExpression = 6
    RULE_multiplicativeExpression = 7
    RULE_additiveExpression = 8
    RULE_shiftExpression = 9
    RULE_relationalExpression = 10
    RULE_equalityExpression = 11
    RULE_andExpression = 12
    RULE_exclusiveOrExpression = 13
    RULE_inclusiveOrExpression = 14
    RULE_logicalAndExpression = 15
    RULE_logicalOrExpression = 16
    RULE_conditionalExpression = 17
    RULE_assignmentExpression = 18
    RULE_assignmentOperator = 19
    RULE_expression = 20
    RULE_constantExpression = 21
    RULE_declaration = 22
    RULE_declarationSpecifier = 23
    RULE_initDeclaratorList = 24
    RULE_initDeclarator = 25
    RULE_storageClassSpecifier = 26
    RULE_typeSpecifier = 27
    RULE_structOrUnionSpecifier = 28
    RULE_structOrUnion = 29
    RULE_structDeclaration = 30
    RULE_specifierQualifierList = 31
    RULE_structDeclaratorList = 32
    RULE_structDeclarator = 33
    RULE_enumSpecifier = 34
    RULE_enumeratorList = 35
    RULE_enumerator = 36
    RULE_atomicTypeSpecifier = 37
    RULE_typeQualifier = 38
    RULE_functionSpecifier = 39
    RULE_alignmentSpecifier = 40
    RULE_declarator = 41
    RULE_directDeclarator = 42
    RULE_gccDeclaratorExtension = 43
    RULE_gccAttributeSpecifier = 44
    RULE_gccAttributeList = 45
    RULE_gccAttribute = 46
    RULE_nestedParenthesesBlock = 47
    RULE_pointer = 48
    RULE_parameterTypeList = 49
    RULE_parameterDeclaration = 50
    RULE_identifierList = 51
    RULE_typeName = 52
    RULE_abstractDeclarator = 53
    RULE_directAbstractDeclarator = 54
    RULE_typedefName = 55
    RULE_initializer = 56
    RULE_initializerList = 57
    RULE_designation = 58
    RULE_designatorList = 59
    RULE_designator = 60
    RULE_staticAssertDeclaration = 61
    RULE_statement = 62
    RULE_labeledStatement = 63
    RULE_compoundStatement = 64
    RULE_blockItemList = 65
    RULE_blockItem = 66
    RULE_expressionStatement = 67
    RULE_selectionStatement = 68
    RULE_iterationStatement = 69
    RULE_jumpStatement = 70
    RULE_compilationUnit = 71
    RULE_translationUnit = 72
    RULE_externalDeclaration = 73
    RULE_functionDefinition = 74
    RULE_declarationList = 75

    ruleNames =  [ u"primaryExpression", u"genericAssociation", u"postfixExpression", 
                   u"argumentExpressionList", u"unaryExpression", u"unaryOperator", 
                   u"castExpression", u"multiplicativeExpression", u"additiveExpression", 
                   u"shiftExpression", u"relationalExpression", u"equalityExpression", 
                   u"andExpression", u"exclusiveOrExpression", u"inclusiveOrExpression", 
                   u"logicalAndExpression", u"logicalOrExpression", u"conditionalExpression", 
                   u"assignmentExpression", u"assignmentOperator", u"expression", 
                   u"constantExpression", u"declaration", u"declarationSpecifier", 
                   u"initDeclaratorList", u"initDeclarator", u"storageClassSpecifier", 
                   u"typeSpecifier", u"structOrUnionSpecifier", u"structOrUnion", 
                   u"structDeclaration", u"specifierQualifierList", u"structDeclaratorList", 
                   u"structDeclarator", u"enumSpecifier", u"enumeratorList", 
                   u"enumerator", u"atomicTypeSpecifier", u"typeQualifier", 
                   u"functionSpecifier", u"alignmentSpecifier", u"declarator", 
                   u"directDeclarator", u"gccDeclaratorExtension", u"gccAttributeSpecifier", 
                   u"gccAttributeList", u"gccAttribute", u"nestedParenthesesBlock", 
                   u"pointer", u"parameterTypeList", u"parameterDeclaration", 
                   u"identifierList", u"typeName", u"abstractDeclarator", 
                   u"directAbstractDeclarator", u"typedefName", u"initializer", 
                   u"initializerList", u"designation", u"designatorList", 
                   u"designator", u"staticAssertDeclaration", u"statement", 
                   u"labeledStatement", u"compoundStatement", u"blockItemList", 
                   u"blockItem", u"expressionStatement", u"selectionStatement", 
                   u"iterationStatement", u"jumpStatement", u"compilationUnit", 
                   u"translationUnit", u"externalDeclaration", u"functionDefinition", 
                   u"declarationList" ]

    EOF = Token.EOF
    T__0=1
    T__1=2
    T__2=3
    T__3=4
    T__4=5
    T__5=6
    T__6=7
    T__7=8
    T__8=9
    T__9=10
    T__10=11
    T__11=12
    T__12=13
    T__13=14
    Auto=15
    Break=16
    Case=17
    Char=18
    Const=19
    Continue=20
    Default=21
    Do=22
    Double=23
    Else=24
    Enum=25
    Extern=26
    Float=27
    For=28
    Goto=29
    If=30
    Inline=31
    Int=32
    Long=33
    Register=34
    Restrict=35
    Return=36
    Short=37
    Signed=38
    Sizeof=39
    Static=40
    Struct=41
    Switch=42
    Typedef=43
    Union=44
    Unsigned=45
    Void=46
    Volatile=47
    While=48
    Alignas=49
    Alignof=50
    Atomic=51
    Bool=52
    Complex=53
    Generic=54
    Imaginary=55
    Noreturn=56
    StaticAssert=57
    ThreadLocal=58
    LeftParen=59
    RightParen=60
    LeftBracket=61
    RightBracket=62
    LeftBrace=63
    RightBrace=64
    Less=65
    LessEqual=66
    Greater=67
    GreaterEqual=68
    LeftShift=69
    RightShift=70
    Plus=71
    PlusPlus=72
    Minus=73
    MinusMinus=74
    Star=75
    Div=76
    Mod=77
    And=78
    Or=79
    AndAnd=80
    OrOr=81
    Caret=82
    Not=83
    Tilde=84
    Question=85
    Colon=86
    Semi=87
    Comma=88
    Assign=89
    StarAssign=90
    DivAssign=91
    ModAssign=92
    PlusAssign=93
    MinusAssign=94
    LeftShiftAssign=95
    RightShiftAssign=96
    AndAssign=97
    XorAssign=98
    OrAssign=99
    Equal=100
    NotEqual=101
    Arrow=102
    Dot=103
    Ellipsis=104
    Identifier=105
    Constant=106
    StringLiteral=107
    LineDirective=108
    PragmaDirective=109
    Whitespace=110
    Newline=111
    BlockComment=112
    LineComment=113

    def __init__(self, input):
        super(CParser, self).__init__(input)
        self.checkVersion("4.5")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None



    class PrimaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.PrimaryExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def Constant(self):
            return self.getToken(CParser.Constant, 0)

        def StringLiteral(self, i=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def genericAssociation(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GenericAssociationContext)
            else:
                return self.getTypedRuleContext(CParser.GenericAssociationContext,i)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_primaryExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterPrimaryExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitPrimaryExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitPrimaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def primaryExpression(self):

        localctx = CParser.PrimaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_primaryExpression)
        self._la = 0 # Token type
        try:
            self.state = 198
            la_ = self._interp.adaptivePredict(self._input,3,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 152
                self.match(CParser.Identifier)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 153
                self.match(CParser.Constant)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 155 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 154
                        self.match(CParser.StringLiteral)

                    else:
                        raise NoViableAltException(self)
                    self.state = 157 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,0,self._ctx)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 159
                self.match(CParser.LeftParen)
                self.state = 160
                self.expression()
                self.state = 161
                self.match(CParser.RightParen)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 163
                self.match(CParser.Generic)
                self.state = 164
                self.match(CParser.LeftParen)
                self.state = 165
                self.assignmentExpression()
                self.state = 166
                self.match(CParser.Comma)
                self.state = 167
                self.genericAssociation()
                self.state = 172
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Comma:
                    self.state = 168
                    self.match(CParser.Comma)
                    self.state = 169
                    self.genericAssociation()
                    self.state = 174
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 175
                self.match(CParser.RightParen)
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 178
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 177
                    self.match(CParser.T__0)


                self.state = 180
                self.match(CParser.LeftParen)
                self.state = 181
                self.compoundStatement()
                self.state = 182
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 184
                self.match(CParser.T__1)
                self.state = 185
                self.match(CParser.LeftParen)
                self.state = 186
                self.unaryExpression()
                self.state = 187
                self.match(CParser.Comma)
                self.state = 188
                self.typeName()
                self.state = 189
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 191
                self.match(CParser.T__2)
                self.state = 192
                self.match(CParser.LeftParen)
                self.state = 193
                self.typeName()
                self.state = 194
                self.match(CParser.Comma)
                self.state = 195
                self.unaryExpression()
                self.state = 196
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GenericAssociationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.GenericAssociationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_genericAssociation

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterGenericAssociation(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitGenericAssociation(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitGenericAssociation(self)
            else:
                return visitor.visitChildren(self)




    def genericAssociation(self):

        localctx = CParser.GenericAssociationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_genericAssociation)
        try:
            self.state = 207
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 200
                self.typeName()
                self.state = 201
                self.match(CParser.Colon)
                self.state = 202
                self.assignmentExpression()

            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 2)
                self.state = 204
                self.match(CParser.Default)
                self.state = 205
                self.match(CParser.Colon)
                self.state = 206
                self.assignmentExpression()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PostfixExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.PostfixExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def primaryExpression(self):
            return self.getTypedRuleContext(CParser.PrimaryExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_postfixExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterPostfixExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitPostfixExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitPostfixExpression(self)
            else:
                return visitor.visitChildren(self)



    def postfixExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.PostfixExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 4
        self.enterRecursionRule(localctx, 4, self.RULE_postfixExpression, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            la_ = self._interp.adaptivePredict(self._input,5,self._ctx)
            if la_ == 1:
                self.state = 210
                self.primaryExpression()
                pass

            elif la_ == 2:
                self.state = 211
                self.match(CParser.LeftParen)
                self.state = 212
                self.typeName()
                self.state = 213
                self.match(CParser.RightParen)
                self.state = 214
                self.match(CParser.LeftBrace)
                self.state = 215
                self.initializerList(0)
                self.state = 216
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.state = 218
                self.match(CParser.LeftParen)
                self.state = 219
                self.typeName()
                self.state = 220
                self.match(CParser.RightParen)
                self.state = 221
                self.match(CParser.LeftBrace)
                self.state = 222
                self.initializerList(0)
                self.state = 223
                self.match(CParser.Comma)
                self.state = 224
                self.match(CParser.RightBrace)
                pass

            elif la_ == 4:
                self.state = 226
                self.match(CParser.T__0)
                self.state = 227
                self.match(CParser.LeftParen)
                self.state = 228
                self.typeName()
                self.state = 229
                self.match(CParser.RightParen)
                self.state = 230
                self.match(CParser.LeftBrace)
                self.state = 231
                self.initializerList(0)
                self.state = 232
                self.match(CParser.RightBrace)
                pass

            elif la_ == 5:
                self.state = 234
                self.match(CParser.T__0)
                self.state = 235
                self.match(CParser.LeftParen)
                self.state = 236
                self.typeName()
                self.state = 237
                self.match(CParser.RightParen)
                self.state = 238
                self.match(CParser.LeftBrace)
                self.state = 239
                self.initializerList(0)
                self.state = 240
                self.match(CParser.Comma)
                self.state = 241
                self.match(CParser.RightBrace)
                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 268
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,8,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 266
                    la_ = self._interp.adaptivePredict(self._input,7,self._ctx)
                    if la_ == 1:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 245
                        if not self.precpred(self._ctx, 10):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 10)")
                        self.state = 246
                        self.match(CParser.LeftBracket)
                        self.state = 247
                        self.expression()
                        self.state = 248
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 250
                        if not self.precpred(self._ctx, 9):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 9)")
                        self.state = 251
                        self.match(CParser.LeftParen)
                        self.state = 253
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 252
                            self.argumentExpressionList()


                        self.state = 255
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 3:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 256
                        if not self.precpred(self._ctx, 8):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 8)")
                        self.state = 257
                        self.match(CParser.Dot)
                        self.state = 258
                        self.match(CParser.Identifier)
                        pass

                    elif la_ == 4:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 259
                        if not self.precpred(self._ctx, 7):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 7)")
                        self.state = 260
                        self.match(CParser.Arrow)
                        self.state = 261
                        self.match(CParser.Identifier)
                        pass

                    elif la_ == 5:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 262
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 263
                        self.match(CParser.PlusPlus)
                        pass

                    elif la_ == 6:
                        localctx = CParser.PostfixExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_postfixExpression)
                        self.state = 264
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 265
                        self.match(CParser.MinusMinus)
                        pass

             
                self.state = 270
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,8,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ArgumentExpressionListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ArgumentExpressionListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_argumentExpressionList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterArgumentExpressionList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitArgumentExpressionList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitArgumentExpressionList(self)
            else:
                return visitor.visitChildren(self)




    def argumentExpressionList(self):

        localctx = CParser.ArgumentExpressionListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_argumentExpressionList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 271
            self.assignmentExpression()
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 272
                self.match(CParser.Comma)
                self.state = 273
                self.assignmentExpression()
                self.state = 278
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.UnaryExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def postfixExpression(self):
            return self.getTypedRuleContext(CParser.PostfixExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def unaryOperator(self):
            return self.getTypedRuleContext(CParser.UnaryOperatorContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_unaryExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterUnaryExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitUnaryExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitUnaryExpression(self)
            else:
                return visitor.visitChildren(self)




    def unaryExpression(self):

        localctx = CParser.UnaryExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_unaryExpression)
        try:
            self.state = 301
            la_ = self._interp.adaptivePredict(self._input,10,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 279
                self.postfixExpression(0)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 280
                self.match(CParser.PlusPlus)
                self.state = 281
                self.unaryExpression()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 282
                self.match(CParser.MinusMinus)
                self.state = 283
                self.unaryExpression()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 284
                self.unaryOperator()
                self.state = 285
                self.castExpression()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 287
                self.match(CParser.Sizeof)
                self.state = 288
                self.unaryExpression()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 289
                self.match(CParser.Sizeof)
                self.state = 290
                self.match(CParser.LeftParen)
                self.state = 291
                self.typeName()
                self.state = 292
                self.match(CParser.RightParen)
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 294
                self.match(CParser.Alignof)
                self.state = 295
                self.match(CParser.LeftParen)
                self.state = 296
                self.typeName()
                self.state = 297
                self.match(CParser.RightParen)
                pass

            elif la_ == 8:
                self.enterOuterAlt(localctx, 8)
                self.state = 299
                self.match(CParser.AndAnd)
                self.state = 300
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class UnaryOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.UnaryOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_unaryOperator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterUnaryOperator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitUnaryOperator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitUnaryOperator(self)
            else:
                return visitor.visitChildren(self)




    def unaryOperator(self):

        localctx = CParser.UnaryOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_unaryOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 303
            _la = self._input.LA(1)
            if not(((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CastExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.CastExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_castExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterCastExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitCastExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitCastExpression(self)
            else:
                return visitor.visitChildren(self)




    def castExpression(self):

        localctx = CParser.CastExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_castExpression)
        self._la = 0 # Token type
        try:
            self.state = 314
            la_ = self._interp.adaptivePredict(self._input,12,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 305
                self.unaryExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 307
                _la = self._input.LA(1)
                if _la==CParser.T__0:
                    self.state = 306
                    self.match(CParser.T__0)


                self.state = 309
                self.match(CParser.LeftParen)
                self.state = 310
                self.typeName()
                self.state = 311
                self.match(CParser.RightParen)
                self.state = 312
                self.castExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class MultiplicativeExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.MultiplicativeExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def castExpression(self):
            return self.getTypedRuleContext(CParser.CastExpressionContext,0)


        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_multiplicativeExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterMultiplicativeExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitMultiplicativeExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitMultiplicativeExpression(self)
            else:
                return visitor.visitChildren(self)



    def multiplicativeExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.MultiplicativeExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 14
        self.enterRecursionRule(localctx, 14, self.RULE_multiplicativeExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 317
            self.castExpression()
            self._ctx.stop = self._input.LT(-1)
            self.state = 330
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,14,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 328
                    la_ = self._interp.adaptivePredict(self._input,13,self._ctx)
                    if la_ == 1:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 319
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 320
                        self.match(CParser.Star)
                        self.state = 321
                        self.castExpression()
                        pass

                    elif la_ == 2:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 322
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 323
                        self.match(CParser.Div)
                        self.state = 324
                        self.castExpression()
                        pass

                    elif la_ == 3:
                        localctx = CParser.MultiplicativeExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_multiplicativeExpression)
                        self.state = 325
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 326
                        self.match(CParser.Mod)
                        self.state = 327
                        self.castExpression()
                        pass

             
                self.state = 332
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,14,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AdditiveExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AdditiveExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def multiplicativeExpression(self):
            return self.getTypedRuleContext(CParser.MultiplicativeExpressionContext,0)


        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_additiveExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAdditiveExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAdditiveExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAdditiveExpression(self)
            else:
                return visitor.visitChildren(self)



    def additiveExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AdditiveExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 16
        self.enterRecursionRule(localctx, 16, self.RULE_additiveExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 334
            self.multiplicativeExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 344
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,16,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 342
                    la_ = self._interp.adaptivePredict(self._input,15,self._ctx)
                    if la_ == 1:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 336
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 337
                        self.match(CParser.Plus)
                        self.state = 338
                        self.multiplicativeExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.AdditiveExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_additiveExpression)
                        self.state = 339
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 340
                        self.match(CParser.Minus)
                        self.state = 341
                        self.multiplicativeExpression(0)
                        pass

             
                self.state = 346
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,16,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ShiftExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ShiftExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def additiveExpression(self):
            return self.getTypedRuleContext(CParser.AdditiveExpressionContext,0)


        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_shiftExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterShiftExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitShiftExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitShiftExpression(self)
            else:
                return visitor.visitChildren(self)



    def shiftExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ShiftExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 18
        self.enterRecursionRule(localctx, 18, self.RULE_shiftExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.additiveExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 358
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,18,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 356
                    la_ = self._interp.adaptivePredict(self._input,17,self._ctx)
                    if la_ == 1:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 350
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 351
                        self.match(CParser.LeftShift)
                        self.state = 352
                        self.additiveExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.ShiftExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_shiftExpression)
                        self.state = 353
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 354
                        self.match(CParser.RightShift)
                        self.state = 355
                        self.additiveExpression(0)
                        pass

             
                self.state = 360
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,18,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class RelationalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.RelationalExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def shiftExpression(self):
            return self.getTypedRuleContext(CParser.ShiftExpressionContext,0)


        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_relationalExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterRelationalExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitRelationalExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitRelationalExpression(self)
            else:
                return visitor.visitChildren(self)



    def relationalExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.RelationalExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 20
        self.enterRecursionRule(localctx, 20, self.RULE_relationalExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 362
            self.shiftExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 378
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,20,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 376
                    la_ = self._interp.adaptivePredict(self._input,19,self._ctx)
                    if la_ == 1:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 364
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 365
                        self.match(CParser.Less)
                        self.state = 366
                        self.shiftExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 367
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 368
                        self.match(CParser.Greater)
                        self.state = 369
                        self.shiftExpression(0)
                        pass

                    elif la_ == 3:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 370
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 371
                        self.match(CParser.LessEqual)
                        self.state = 372
                        self.shiftExpression(0)
                        pass

                    elif la_ == 4:
                        localctx = CParser.RelationalExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_relationalExpression)
                        self.state = 373
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 374
                        self.match(CParser.GreaterEqual)
                        self.state = 375
                        self.shiftExpression(0)
                        pass

             
                self.state = 380
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,20,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class EqualityExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.EqualityExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def relationalExpression(self):
            return self.getTypedRuleContext(CParser.RelationalExpressionContext,0)


        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_equalityExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterEqualityExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitEqualityExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitEqualityExpression(self)
            else:
                return visitor.visitChildren(self)



    def equalityExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.EqualityExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 22
        self.enterRecursionRule(localctx, 22, self.RULE_equalityExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 382
            self.relationalExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 392
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,22,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 390
                    la_ = self._interp.adaptivePredict(self._input,21,self._ctx)
                    if la_ == 1:
                        localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 384
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 385
                        self.match(CParser.Equal)
                        self.state = 386
                        self.relationalExpression(0)
                        pass

                    elif la_ == 2:
                        localctx = CParser.EqualityExpressionContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_equalityExpression)
                        self.state = 387
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 388
                        self.match(CParser.NotEqual)
                        self.state = 389
                        self.relationalExpression(0)
                        pass

             
                self.state = 394
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,22,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class AndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AndExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def equalityExpression(self):
            return self.getTypedRuleContext(CParser.EqualityExpressionContext,0)


        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_andExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAndExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAndExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def andExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.AndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 24
        self.enterRecursionRule(localctx, 24, self.RULE_andExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 396
            self.equalityExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 403
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,23,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.AndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_andExpression)
                    self.state = 398
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 399
                    self.match(CParser.And)
                    self.state = 400
                    self.equalityExpression(0) 
                self.state = 405
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,23,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ExclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ExclusiveOrExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def andExpression(self):
            return self.getTypedRuleContext(CParser.AndExpressionContext,0)


        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_exclusiveOrExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterExclusiveOrExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitExclusiveOrExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitExclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def exclusiveOrExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.ExclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 26
        self.enterRecursionRule(localctx, 26, self.RULE_exclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 407
            self.andExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 414
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,24,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.ExclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_exclusiveOrExpression)
                    self.state = 409
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 410
                    self.match(CParser.Caret)
                    self.state = 411
                    self.andExpression(0) 
                self.state = 416
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,24,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class InclusiveOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.InclusiveOrExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def exclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.ExclusiveOrExpressionContext,0)


        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_inclusiveOrExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterInclusiveOrExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitInclusiveOrExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitInclusiveOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def inclusiveOrExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InclusiveOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 28
        self.enterRecursionRule(localctx, 28, self.RULE_inclusiveOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 418
            self.exclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 425
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,25,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InclusiveOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_inclusiveOrExpression)
                    self.state = 420
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 421
                    self.match(CParser.Or)
                    self.state = 422
                    self.exclusiveOrExpression(0) 
                self.state = 427
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,25,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalAndExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.LogicalAndExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def inclusiveOrExpression(self):
            return self.getTypedRuleContext(CParser.InclusiveOrExpressionContext,0)


        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_logicalAndExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterLogicalAndExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitLogicalAndExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitLogicalAndExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalAndExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalAndExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 30
        self.enterRecursionRule(localctx, 30, self.RULE_logicalAndExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 429
            self.inclusiveOrExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 436
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,26,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalAndExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalAndExpression)
                    self.state = 431
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 432
                    self.match(CParser.AndAnd)
                    self.state = 433
                    self.inclusiveOrExpression(0) 
                self.state = 438
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,26,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class LogicalOrExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.LogicalOrExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def logicalAndExpression(self):
            return self.getTypedRuleContext(CParser.LogicalAndExpressionContext,0)


        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_logicalOrExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterLogicalOrExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitLogicalOrExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitLogicalOrExpression(self)
            else:
                return visitor.visitChildren(self)



    def logicalOrExpression(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.LogicalOrExpressionContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 32
        self.enterRecursionRule(localctx, 32, self.RULE_logicalOrExpression, _p)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 440
            self.logicalAndExpression(0)
            self._ctx.stop = self._input.LT(-1)
            self.state = 447
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,27,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.LogicalOrExpressionContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_logicalOrExpression)
                    self.state = 442
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 443
                    self.match(CParser.OrOr)
                    self.state = 444
                    self.logicalAndExpression(0) 
                self.state = 449
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,27,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class ConditionalExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ConditionalExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def logicalOrExpression(self):
            return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,0)


        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_conditionalExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterConditionalExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitConditionalExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitConditionalExpression(self)
            else:
                return visitor.visitChildren(self)




    def conditionalExpression(self):

        localctx = CParser.ConditionalExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_conditionalExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 450
            self.logicalOrExpression(0)
            self.state = 456
            la_ = self._interp.adaptivePredict(self._input,28,self._ctx)
            if la_ == 1:
                self.state = 451
                self.match(CParser.Question)
                self.state = 452
                self.expression()
                self.state = 453
                self.match(CParser.Colon)
                self.state = 454
                self.conditionalExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AssignmentExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def assignmentOperator(self):
            return self.getTypedRuleContext(CParser.AssignmentOperatorContext,0)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_assignmentExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAssignmentExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAssignmentExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAssignmentExpression(self)
            else:
                return visitor.visitChildren(self)




    def assignmentExpression(self):

        localctx = CParser.AssignmentExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_assignmentExpression)
        try:
            self.state = 463
            la_ = self._interp.adaptivePredict(self._input,29,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 458
                self.conditionalExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 459
                self.unaryExpression()
                self.state = 460
                self.assignmentOperator()
                self.state = 461
                self.assignmentExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AssignmentOperatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AssignmentOperatorContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_assignmentOperator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAssignmentOperator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAssignmentOperator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAssignmentOperator(self)
            else:
                return visitor.visitChildren(self)




    def assignmentOperator(self):

        localctx = CParser.AssignmentOperatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_assignmentOperator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 465
            _la = self._input.LA(1)
            if not(((((_la - 89)) & ~0x3f) == 0 and ((1 << (_la - 89)) & ((1 << (CParser.Assign - 89)) | (1 << (CParser.StarAssign - 89)) | (1 << (CParser.DivAssign - 89)) | (1 << (CParser.ModAssign - 89)) | (1 << (CParser.PlusAssign - 89)) | (1 << (CParser.MinusAssign - 89)) | (1 << (CParser.LeftShiftAssign - 89)) | (1 << (CParser.RightShiftAssign - 89)) | (1 << (CParser.AndAssign - 89)) | (1 << (CParser.XorAssign - 89)) | (1 << (CParser.OrAssign - 89)))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.AssignmentExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.AssignmentExpressionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_expression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = CParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 467
            self.assignmentExpression()
            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 468
                self.match(CParser.Comma)
                self.state = 469
                self.assignmentExpression()
                self.state = 474
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ConstantExpressionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ConstantExpressionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def conditionalExpression(self):
            return self.getTypedRuleContext(CParser.ConditionalExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_constantExpression

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterConstantExpression(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitConstantExpression(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitConstantExpression(self)
            else:
                return visitor.visitChildren(self)




    def constantExpression(self):

        localctx = CParser.ConstantExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_constantExpression)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 475
            self.conditionalExpression()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarationSpecifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def initDeclaratorList(self):
            return self.getTypedRuleContext(CParser.InitDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declaration

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDeclaration(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDeclaration(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def declaration(self):

        localctx = CParser.DeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_declaration)
        self._la = 0 # Token type
        try:
            self.state = 488
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__11, CParser.Auto, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Extern, CParser.Float, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Static, CParser.Struct, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Alignas, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Noreturn, CParser.ThreadLocal, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 478 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 477
                        self.declarationSpecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 480 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,31,self._ctx)

                self.state = 483
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 482
                    self.initDeclaratorList()


                self.state = 485
                self.match(CParser.Semi)

            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 487
                self.staticAssertDeclaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DeclarationSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def storageClassSpecifier(self):
            return self.getTypedRuleContext(CParser.StorageClassSpecifierContext,0)


        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def functionSpecifier(self):
            return self.getTypedRuleContext(CParser.FunctionSpecifierContext,0)


        def alignmentSpecifier(self):
            return self.getTypedRuleContext(CParser.AlignmentSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_declarationSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDeclarationSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDeclarationSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDeclarationSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def declarationSpecifier(self):

        localctx = CParser.DeclarationSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_declarationSpecifier)
        try:
            self.state = 495
            la_ = self._interp.adaptivePredict(self._input,34,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 490
                self.storageClassSpecifier()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 491
                self.typeSpecifier()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 492
                self.typeQualifier()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 493
                self.functionSpecifier()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 494
                self.alignmentSpecifier()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.InitDeclaratorListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def initDeclarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.InitDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.InitDeclaratorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_initDeclaratorList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterInitDeclaratorList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitInitDeclaratorList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitInitDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def initDeclaratorList(self):

        localctx = CParser.InitDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_initDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.initDeclarator()
            self.state = 502
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 498
                self.match(CParser.Comma)
                self.state = 499
                self.initDeclarator()
                self.state = 504
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.InitDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initDeclarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterInitDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitInitDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitInitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def initDeclarator(self):

        localctx = CParser.InitDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_initDeclarator)
        try:
            self.state = 510
            la_ = self._interp.adaptivePredict(self._input,36,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 505
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 506
                self.declarator()
                self.state = 507
                self.match(CParser.Assign)
                self.state = 508
                self.initializer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StorageClassSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StorageClassSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_storageClassSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStorageClassSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStorageClassSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStorageClassSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def storageClassSpecifier(self):

        localctx = CParser.StorageClassSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_storageClassSpecifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 512
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Auto) | (1 << CParser.Extern) | (1 << CParser.Register) | (1 << CParser.Static) | (1 << CParser.Typedef) | (1 << CParser.ThreadLocal))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.TypeSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def atomicTypeSpecifier(self):
            return self.getTypedRuleContext(CParser.AtomicTypeSpecifierContext,0)


        def structOrUnionSpecifier(self):
            return self.getTypedRuleContext(CParser.StructOrUnionSpecifierContext,0)


        def enumSpecifier(self):
            return self.getTypedRuleContext(CParser.EnumSpecifierContext,0)


        def typedefName(self):
            return self.getTypedRuleContext(CParser.TypedefNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterTypeSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitTypeSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def typeSpecifier(self):

        localctx = CParser.TypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_typeSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 528
            token = self._input.LA(1)
            if token in [CParser.T__3, CParser.T__4, CParser.T__5, CParser.Char, CParser.Double, CParser.Float, CParser.Int, CParser.Long, CParser.Short, CParser.Signed, CParser.Unsigned, CParser.Void, CParser.Bool, CParser.Complex]:
                self.enterOuterAlt(localctx, 1)
                self.state = 514
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.Char) | (1 << CParser.Double) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Bool) | (1 << CParser.Complex))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [CParser.T__0]:
                self.enterOuterAlt(localctx, 2)
                self.state = 515
                self.match(CParser.T__0)
                self.state = 516
                self.match(CParser.LeftParen)
                self.state = 517
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 518
                self.match(CParser.RightParen)

            elif token in [CParser.Atomic]:
                self.enterOuterAlt(localctx, 3)
                self.state = 519
                self.atomicTypeSpecifier()

            elif token in [CParser.Struct, CParser.Union]:
                self.enterOuterAlt(localctx, 4)
                self.state = 520
                self.structOrUnionSpecifier()

            elif token in [CParser.Enum]:
                self.enterOuterAlt(localctx, 5)
                self.state = 521
                self.enumSpecifier()

            elif token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 6)
                self.state = 522
                self.typedefName()

            elif token in [CParser.T__6]:
                self.enterOuterAlt(localctx, 7)
                self.state = 523
                self.match(CParser.T__6)
                self.state = 524
                self.match(CParser.LeftParen)
                self.state = 525
                self.constantExpression()
                self.state = 526
                self.match(CParser.RightParen)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StructOrUnionSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def structOrUnion(self):
            return self.getTypedRuleContext(CParser.StructOrUnionContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def structDeclaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structOrUnionSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStructOrUnionSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStructOrUnionSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStructOrUnionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnionSpecifier(self):

        localctx = CParser.StructOrUnionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_structOrUnionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 545
            la_ = self._interp.adaptivePredict(self._input,40,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 530
                self.structOrUnion()
                self.state = 532
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 531
                    self.match(CParser.Identifier)


                self.state = 534
                self.match(CParser.LeftBrace)
                self.state = 536 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 535
                    self.structDeclaration()
                    self.state = 538 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Float) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Struct) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.StaticAssert))) != 0) or _la==CParser.Identifier):
                        break

                self.state = 540
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 542
                self.structOrUnion()
                self.state = 543
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructOrUnionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StructOrUnionContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_structOrUnion

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStructOrUnion(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStructOrUnion(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStructOrUnion(self)
            else:
                return visitor.visitChildren(self)




    def structOrUnion(self):

        localctx = CParser.StructOrUnionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_structOrUnion)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 547
            _la = self._input.LA(1)
            if not(_la==CParser.Struct or _la==CParser.Union):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StructDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def structDeclaratorList(self):
            return self.getTypedRuleContext(CParser.StructDeclaratorListContext,0)


        def staticAssertDeclaration(self):
            return self.getTypedRuleContext(CParser.StaticAssertDeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaration

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStructDeclaration(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStructDeclaration(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStructDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaration(self):

        localctx = CParser.StructDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_structDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 556
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.Char, CParser.Const, CParser.Double, CParser.Enum, CParser.Float, CParser.Int, CParser.Long, CParser.Restrict, CParser.Short, CParser.Signed, CParser.Struct, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 549
                self.specifierQualifierList()
                self.state = 551
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Colon - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 550
                    self.structDeclaratorList()


                self.state = 553
                self.match(CParser.Semi)

            elif token in [CParser.StaticAssert]:
                self.enterOuterAlt(localctx, 2)
                self.state = 555
                self.staticAssertDeclaration()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SpecifierQualifierListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.SpecifierQualifierListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeSpecifier(self):
            return self.getTypedRuleContext(CParser.TypeSpecifierContext,0)


        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def typeQualifier(self):
            return self.getTypedRuleContext(CParser.TypeQualifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_specifierQualifierList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterSpecifierQualifierList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitSpecifierQualifierList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitSpecifierQualifierList(self)
            else:
                return visitor.visitChildren(self)




    def specifierQualifierList(self):

        localctx = CParser.SpecifierQualifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_specifierQualifierList)
        try:
            self.state = 566
            la_ = self._interp.adaptivePredict(self._input,45,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 558
                self.typeSpecifier()
                self.state = 560
                la_ = self._interp.adaptivePredict(self._input,43,self._ctx)
                if la_ == 1:
                    self.state = 559
                    self.specifierQualifierList()


                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 562
                self.typeQualifier()
                self.state = 564
                la_ = self._interp.adaptivePredict(self._input,44,self._ctx)
                if la_ == 1:
                    self.state = 563
                    self.specifierQualifierList()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclaratorListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StructDeclaratorListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def structDeclarator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StructDeclaratorContext)
            else:
                return self.getTypedRuleContext(CParser.StructDeclaratorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_structDeclaratorList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStructDeclaratorList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStructDeclaratorList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStructDeclaratorList(self)
            else:
                return visitor.visitChildren(self)




    def structDeclaratorList(self):

        localctx = CParser.StructDeclaratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_structDeclaratorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 568
            self.structDeclarator()
            self.state = 573
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 569
                self.match(CParser.Comma)
                self.state = 570
                self.structDeclarator()
                self.state = 575
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StructDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StructDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_structDeclarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStructDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStructDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStructDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def structDeclarator(self):

        localctx = CParser.StructDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_structDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 582
            la_ = self._interp.adaptivePredict(self._input,48,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 576
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 578
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)) | (1 << (CParser.Identifier - 59)))) != 0):
                    self.state = 577
                    self.declarator()


                self.state = 580
                self.match(CParser.Colon)
                self.state = 581
                self.constantExpression()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.EnumSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumeratorList(self):
            return self.getTypedRuleContext(CParser.EnumeratorListContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_enumSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterEnumSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitEnumSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitEnumSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def enumSpecifier(self):

        localctx = CParser.EnumSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_enumSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 603
            la_ = self._interp.adaptivePredict(self._input,51,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 584
                self.match(CParser.Enum)
                self.state = 586
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 585
                    self.match(CParser.Identifier)


                self.state = 588
                self.match(CParser.LeftBrace)
                self.state = 589
                self.enumeratorList()
                self.state = 590
                self.match(CParser.RightBrace)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 592
                self.match(CParser.Enum)
                self.state = 594
                _la = self._input.LA(1)
                if _la==CParser.Identifier:
                    self.state = 593
                    self.match(CParser.Identifier)


                self.state = 596
                self.match(CParser.LeftBrace)
                self.state = 597
                self.enumeratorList()
                self.state = 598
                self.match(CParser.Comma)
                self.state = 599
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 601
                self.match(CParser.Enum)
                self.state = 602
                self.match(CParser.Identifier)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.EnumeratorListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def enumerator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.EnumeratorContext)
            else:
                return self.getTypedRuleContext(CParser.EnumeratorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_enumeratorList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterEnumeratorList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitEnumeratorList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitEnumeratorList(self)
            else:
                return visitor.visitChildren(self)




    def enumeratorList(self):

        localctx = CParser.EnumeratorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_enumeratorList)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 605
            self.enumerator()
            self.state = 610
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,52,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 606
                    self.match(CParser.Comma)
                    self.state = 607
                    self.enumerator() 
                self.state = 612
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,52,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class EnumeratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.EnumeratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_enumerator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterEnumerator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitEnumerator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitEnumerator(self)
            else:
                return visitor.visitChildren(self)




    def enumerator(self):

        localctx = CParser.EnumeratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_enumerator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 613
            self.match(CParser.Identifier)
            self.state = 616
            _la = self._input.LA(1)
            if _la==CParser.Assign:
                self.state = 614
                self.match(CParser.Assign)
                self.state = 615
                self.constantExpression()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AtomicTypeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AtomicTypeSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def getRuleIndex(self):
            return CParser.RULE_atomicTypeSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAtomicTypeSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAtomicTypeSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAtomicTypeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def atomicTypeSpecifier(self):

        localctx = CParser.AtomicTypeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_atomicTypeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(CParser.Atomic)
            self.state = 619
            self.match(CParser.LeftParen)
            self.state = 620
            self.typeName()
            self.state = 621
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeQualifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.TypeQualifierContext, self).__init__(parent, invokingState)
            self.parser = parser


        def getRuleIndex(self):
            return CParser.RULE_typeQualifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterTypeQualifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitTypeQualifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitTypeQualifier(self)
            else:
                return visitor.visitChildren(self)




    def typeQualifier(self):

        localctx = CParser.TypeQualifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_typeQualifier)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 623
            _la = self._input.LA(1)
            if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                self._errHandler.recoverInline(self)
            else:
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.FunctionSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_functionSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterFunctionSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitFunctionSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitFunctionSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def functionSpecifier(self):

        localctx = CParser.FunctionSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_functionSpecifier)
        self._la = 0 # Token type
        try:
            self.state = 631
            token = self._input.LA(1)
            if token in [CParser.T__7, CParser.T__8, CParser.Inline, CParser.Noreturn]:
                self.enterOuterAlt(localctx, 1)
                self.state = 625
                _la = self._input.LA(1)
                if not((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.Inline) | (1 << CParser.Noreturn))) != 0)):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()

            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 626
                self.gccAttributeSpecifier()

            elif token in [CParser.T__9]:
                self.enterOuterAlt(localctx, 3)
                self.state = 627
                self.match(CParser.T__9)
                self.state = 628
                self.match(CParser.LeftParen)
                self.state = 629
                self.match(CParser.Identifier)
                self.state = 630
                self.match(CParser.RightParen)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AlignmentSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AlignmentSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeName(self):
            return self.getTypedRuleContext(CParser.TypeNameContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_alignmentSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAlignmentSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAlignmentSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAlignmentSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def alignmentSpecifier(self):

        localctx = CParser.AlignmentSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_alignmentSpecifier)
        try:
            self.state = 643
            la_ = self._interp.adaptivePredict(self._input,55,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 633
                self.match(CParser.Alignas)
                self.state = 634
                self.match(CParser.LeftParen)
                self.state = 635
                self.typeName()
                self.state = 636
                self.match(CParser.RightParen)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 638
                self.match(CParser.Alignas)
                self.state = 639
                self.match(CParser.LeftParen)
                self.state = 640
                self.constantExpression()
                self.state = 641
                self.match(CParser.RightParen)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def gccDeclaratorExtension(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def declarator(self):

        localctx = CParser.DeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_declarator)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 646
            _la = self._input.LA(1)
            if _la==CParser.Star or _la==CParser.Caret:
                self.state = 645
                self.pointer()


            self.state = 648
            self.directDeclarator(0)
            self.state = 652
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,57,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 649
                    self.gccDeclaratorExtension() 
                self.state = 654
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,57,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DirectDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def directDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectDeclaratorContext,0)


        def typeQualifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def identifierList(self):
            return self.getTypedRuleContext(CParser.IdentifierListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directDeclarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDirectDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDirectDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDirectDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directDeclarator(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 84
        self.enterRecursionRule(localctx, 84, self.RULE_directDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 661
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.state = 656
                self.match(CParser.Identifier)

            elif token in [CParser.LeftParen]:
                self.state = 657
                self.match(CParser.LeftParen)
                self.state = 658
                self.declarator()
                self.state = 659
                self.match(CParser.RightParen)

            else:
                raise NoViableAltException(self)

            self._ctx.stop = self._input.LT(-1)
            self.state = 721
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,66,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 719
                    la_ = self._interp.adaptivePredict(self._input,65,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 663
                        if not self.precpred(self._ctx, 6):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 6)")
                        self.state = 664
                        self.match(CParser.LeftBracket)
                        self.state = 668
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 665
                            self.typeQualifier()
                            self.state = 670
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 672
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 671
                            self.assignmentExpression()


                        self.state = 674
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 675
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 676
                        self.match(CParser.LeftBracket)
                        self.state = 677
                        self.match(CParser.Static)
                        self.state = 681
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 678
                            self.typeQualifier()
                            self.state = 683
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 684
                        self.assignmentExpression()
                        self.state = 685
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 687
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 688
                        self.match(CParser.LeftBracket)
                        self.state = 690 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 689
                            self.typeQualifier()
                            self.state = 692 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                                break

                        self.state = 694
                        self.match(CParser.Static)
                        self.state = 695
                        self.assignmentExpression()
                        self.state = 696
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 698
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 699
                        self.match(CParser.LeftBracket)
                        self.state = 703
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 700
                            self.typeQualifier()
                            self.state = 705
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 706
                        self.match(CParser.Star)
                        self.state = 707
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 708
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 709
                        self.match(CParser.LeftParen)
                        self.state = 710
                        self.parameterTypeList()
                        self.state = 711
                        self.match(CParser.RightParen)
                        pass

                    elif la_ == 6:
                        localctx = CParser.DirectDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directDeclarator)
                        self.state = 713
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 714
                        self.match(CParser.LeftParen)
                        self.state = 716
                        _la = self._input.LA(1)
                        if _la==CParser.Identifier:
                            self.state = 715
                            self.identifierList()


                        self.state = 718
                        self.match(CParser.RightParen)
                        pass

             
                self.state = 723
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,66,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class GccDeclaratorExtensionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.GccDeclaratorExtensionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def StringLiteral(self, i=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def gccAttributeSpecifier(self):
            return self.getTypedRuleContext(CParser.GccAttributeSpecifierContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccDeclaratorExtension

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterGccDeclaratorExtension(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitGccDeclaratorExtension(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitGccDeclaratorExtension(self)
            else:
                return visitor.visitChildren(self)




    def gccDeclaratorExtension(self):

        localctx = CParser.GccDeclaratorExtensionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_gccDeclaratorExtension)
        self._la = 0 # Token type
        try:
            self.state = 733
            token = self._input.LA(1)
            if token in [CParser.T__10]:
                self.enterOuterAlt(localctx, 1)
                self.state = 724
                self.match(CParser.T__10)
                self.state = 725
                self.match(CParser.LeftParen)
                self.state = 727 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 726
                    self.match(CParser.StringLiteral)
                    self.state = 729 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==CParser.StringLiteral):
                        break

                self.state = 731
                self.match(CParser.RightParen)

            elif token in [CParser.T__11]:
                self.enterOuterAlt(localctx, 2)
                self.state = 732
                self.gccAttributeSpecifier()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeSpecifierContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.GccAttributeSpecifierContext, self).__init__(parent, invokingState)
            self.parser = parser

        def gccAttributeList(self):
            return self.getTypedRuleContext(CParser.GccAttributeListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttributeSpecifier

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterGccAttributeSpecifier(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitGccAttributeSpecifier(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitGccAttributeSpecifier(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeSpecifier(self):

        localctx = CParser.GccAttributeSpecifierContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_gccAttributeSpecifier)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 735
            self.match(CParser.T__11)
            self.state = 736
            self.match(CParser.LeftParen)
            self.state = 737
            self.match(CParser.LeftParen)
            self.state = 738
            self.gccAttributeList()
            self.state = 739
            self.match(CParser.RightParen)
            self.state = 740
            self.match(CParser.RightParen)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.GccAttributeListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def gccAttribute(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccAttributeContext)
            else:
                return self.getTypedRuleContext(CParser.GccAttributeContext,i)


        def getRuleIndex(self):
            return CParser.RULE_gccAttributeList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterGccAttributeList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitGccAttributeList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitGccAttributeList(self)
            else:
                return visitor.visitChildren(self)




    def gccAttributeList(self):

        localctx = CParser.GccAttributeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_gccAttributeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 742
            self.gccAttribute()
            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 743
                self.match(CParser.Comma)
                self.state = 744
                self.gccAttribute()
                self.state = 749
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class GccAttributeContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.GccAttributeContext, self).__init__(parent, invokingState)
            self.parser = parser

        def argumentExpressionList(self):
            return self.getTypedRuleContext(CParser.ArgumentExpressionListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_gccAttribute

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterGccAttribute(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitGccAttribute(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitGccAttribute(self)
            else:
                return visitor.visitChildren(self)




    def gccAttribute(self):

        localctx = CParser.GccAttributeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_gccAttribute)
        self._la = 0 # Token type
        try:
            self.state = 759
            token = self._input.LA(1)
            if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.StringLiteral, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                self.enterOuterAlt(localctx, 1)
                self.state = 750
                _la = self._input.LA(1)
                if _la <= 0 or ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.RightParen - 59)) | (1 << (CParser.Comma - 59)))) != 0):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 756
                _la = self._input.LA(1)
                if _la==CParser.LeftParen:
                    self.state = 751
                    self.match(CParser.LeftParen)
                    self.state = 753
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 752
                        self.argumentExpressionList()


                    self.state = 755
                    self.match(CParser.RightParen)



            elif token in [CParser.RightParen, CParser.Comma]:
                self.enterOuterAlt(localctx, 2)


            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class NestedParenthesesBlockContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.NestedParenthesesBlockContext, self).__init__(parent, invokingState)
            self.parser = parser

        def nestedParenthesesBlock(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.NestedParenthesesBlockContext)
            else:
                return self.getTypedRuleContext(CParser.NestedParenthesesBlockContext,i)


        def getRuleIndex(self):
            return CParser.RULE_nestedParenthesesBlock

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterNestedParenthesesBlock(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitNestedParenthesesBlock(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitNestedParenthesesBlock(self)
            else:
                return visitor.visitChildren(self)




    def nestedParenthesesBlock(self):

        localctx = CParser.NestedParenthesesBlockContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_nestedParenthesesBlock)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 768
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.T__13) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Else) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Imaginary) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBracket) | (1 << CParser.RightBracket) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 64)) & ~0x3f) == 0 and ((1 << (_la - 64)) & ((1 << (CParser.RightBrace - 64)) | (1 << (CParser.Less - 64)) | (1 << (CParser.LessEqual - 64)) | (1 << (CParser.Greater - 64)) | (1 << (CParser.GreaterEqual - 64)) | (1 << (CParser.LeftShift - 64)) | (1 << (CParser.RightShift - 64)) | (1 << (CParser.Plus - 64)) | (1 << (CParser.PlusPlus - 64)) | (1 << (CParser.Minus - 64)) | (1 << (CParser.MinusMinus - 64)) | (1 << (CParser.Star - 64)) | (1 << (CParser.Div - 64)) | (1 << (CParser.Mod - 64)) | (1 << (CParser.And - 64)) | (1 << (CParser.Or - 64)) | (1 << (CParser.AndAnd - 64)) | (1 << (CParser.OrOr - 64)) | (1 << (CParser.Caret - 64)) | (1 << (CParser.Not - 64)) | (1 << (CParser.Tilde - 64)) | (1 << (CParser.Question - 64)) | (1 << (CParser.Colon - 64)) | (1 << (CParser.Semi - 64)) | (1 << (CParser.Comma - 64)) | (1 << (CParser.Assign - 64)) | (1 << (CParser.StarAssign - 64)) | (1 << (CParser.DivAssign - 64)) | (1 << (CParser.ModAssign - 64)) | (1 << (CParser.PlusAssign - 64)) | (1 << (CParser.MinusAssign - 64)) | (1 << (CParser.LeftShiftAssign - 64)) | (1 << (CParser.RightShiftAssign - 64)) | (1 << (CParser.AndAssign - 64)) | (1 << (CParser.XorAssign - 64)) | (1 << (CParser.OrAssign - 64)) | (1 << (CParser.Equal - 64)) | (1 << (CParser.NotEqual - 64)) | (1 << (CParser.Arrow - 64)) | (1 << (CParser.Dot - 64)) | (1 << (CParser.Ellipsis - 64)) | (1 << (CParser.Identifier - 64)) | (1 << (CParser.Constant - 64)) | (1 << (CParser.StringLiteral - 64)) | (1 << (CParser.LineDirective - 64)) | (1 << (CParser.PragmaDirective - 64)) | (1 << (CParser.Whitespace - 64)) | (1 << (CParser.Newline - 64)) | (1 << (CParser.BlockComment - 64)) | (1 << (CParser.LineComment - 64)))) != 0):
                self.state = 766
                token = self._input.LA(1)
                if token in [CParser.T__0, CParser.T__1, CParser.T__2, CParser.T__3, CParser.T__4, CParser.T__5, CParser.T__6, CParser.T__7, CParser.T__8, CParser.T__9, CParser.T__10, CParser.T__11, CParser.T__12, CParser.T__13, CParser.Auto, CParser.Break, CParser.Case, CParser.Char, CParser.Const, CParser.Continue, CParser.Default, CParser.Do, CParser.Double, CParser.Else, CParser.Enum, CParser.Extern, CParser.Float, CParser.For, CParser.Goto, CParser.If, CParser.Inline, CParser.Int, CParser.Long, CParser.Register, CParser.Restrict, CParser.Return, CParser.Short, CParser.Signed, CParser.Sizeof, CParser.Static, CParser.Struct, CParser.Switch, CParser.Typedef, CParser.Union, CParser.Unsigned, CParser.Void, CParser.Volatile, CParser.While, CParser.Alignas, CParser.Alignof, CParser.Atomic, CParser.Bool, CParser.Complex, CParser.Generic, CParser.Imaginary, CParser.Noreturn, CParser.StaticAssert, CParser.ThreadLocal, CParser.LeftBracket, CParser.RightBracket, CParser.LeftBrace, CParser.RightBrace, CParser.Less, CParser.LessEqual, CParser.Greater, CParser.GreaterEqual, CParser.LeftShift, CParser.RightShift, CParser.Plus, CParser.PlusPlus, CParser.Minus, CParser.MinusMinus, CParser.Star, CParser.Div, CParser.Mod, CParser.And, CParser.Or, CParser.AndAnd, CParser.OrOr, CParser.Caret, CParser.Not, CParser.Tilde, CParser.Question, CParser.Colon, CParser.Semi, CParser.Comma, CParser.Assign, CParser.StarAssign, CParser.DivAssign, CParser.ModAssign, CParser.PlusAssign, CParser.MinusAssign, CParser.LeftShiftAssign, CParser.RightShiftAssign, CParser.AndAssign, CParser.XorAssign, CParser.OrAssign, CParser.Equal, CParser.NotEqual, CParser.Arrow, CParser.Dot, CParser.Ellipsis, CParser.Identifier, CParser.Constant, CParser.StringLiteral, CParser.LineDirective, CParser.PragmaDirective, CParser.Whitespace, CParser.Newline, CParser.BlockComment, CParser.LineComment]:
                    self.state = 761
                    _la = self._input.LA(1)
                    if _la <= 0 or _la==CParser.LeftParen or _la==CParser.RightParen:
                        self._errHandler.recoverInline(self)
                    else:
                        self.consume()

                elif token in [CParser.LeftParen]:
                    self.state = 762
                    self.match(CParser.LeftParen)
                    self.state = 763
                    self.nestedParenthesesBlock()
                    self.state = 764
                    self.match(CParser.RightParen)

                else:
                    raise NoViableAltException(self)

                self.state = 770
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class PointerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.PointerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def typeQualifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def getRuleIndex(self):
            return CParser.RULE_pointer

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterPointer(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitPointer(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitPointer(self)
            else:
                return visitor.visitChildren(self)




    def pointer(self):

        localctx = CParser.PointerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_pointer)
        self._la = 0 # Token type
        try:
            self.state = 801
            la_ = self._interp.adaptivePredict(self._input,79,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 771
                self.match(CParser.Star)
                self.state = 775
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 772
                    self.typeQualifier()
                    self.state = 777
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 778
                self.match(CParser.Star)
                self.state = 782
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 779
                    self.typeQualifier()
                    self.state = 784
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 785
                self.pointer()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 786
                self.match(CParser.Caret)
                self.state = 790
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 787
                    self.typeQualifier()
                    self.state = 792
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 793
                self.match(CParser.Caret)
                self.state = 797
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 794
                    self.typeQualifier()
                    self.state = 799
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 800
                self.pointer()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterTypeListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ParameterTypeListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def parameterDeclaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ParameterDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ParameterDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_parameterTypeList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterParameterTypeList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitParameterTypeList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitParameterTypeList(self)
            else:
                return visitor.visitChildren(self)




    def parameterTypeList(self):

        localctx = CParser.ParameterTypeListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_parameterTypeList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 803
            self.parameterDeclaration()
            self.state = 808
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,80,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 804
                    self.match(CParser.Comma)
                    self.state = 805
                    self.parameterDeclaration() 
                self.state = 810
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,80,self._ctx)

            self.state = 813
            _la = self._input.LA(1)
            if _la==CParser.Comma:
                self.state = 811
                self.match(CParser.Comma)
                self.state = 812
                self.match(CParser.Ellipsis)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ParameterDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ParameterDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def declarationSpecifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_parameterDeclaration

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterParameterDeclaration(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitParameterDeclaration(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitParameterDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def parameterDeclaration(self):

        localctx = CParser.ParameterDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_parameterDeclaration)
        self._la = 0 # Token type
        try:
            self.state = 830
            la_ = self._interp.adaptivePredict(self._input,85,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 816 
                self._errHandler.sync(self)
                _alt = 1
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt == 1:
                        self.state = 815
                        self.declarationSpecifier()

                    else:
                        raise NoViableAltException(self)
                    self.state = 818 
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,82,self._ctx)

                self.state = 820
                self.declarator()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 823 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 822
                    self.declarationSpecifier()
                    self.state = 825 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier):
                        break

                self.state = 828
                _la = self._input.LA(1)
                if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) != 0):
                    self.state = 827
                    self.abstractDeclarator()


                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IdentifierListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.IdentifierListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self, i=None):
            if i is None:
                return self.getTokens(CParser.Identifier)
            else:
                return self.getToken(CParser.Identifier, i)

        def getRuleIndex(self):
            return CParser.RULE_identifierList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterIdentifierList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitIdentifierList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitIdentifierList(self)
            else:
                return visitor.visitChildren(self)




    def identifierList(self):

        localctx = CParser.IdentifierListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_identifierList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 832
            self.match(CParser.Identifier)
            self.state = 837
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==CParser.Comma:
                self.state = 833
                self.match(CParser.Comma)
                self.state = 834
                self.match(CParser.Identifier)
                self.state = 839
                self._errHandler.sync(self)
                _la = self._input.LA(1)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TypeNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.TypeNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def specifierQualifierList(self):
            return self.getTypedRuleContext(CParser.SpecifierQualifierListContext,0)


        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_typeName

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterTypeName(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitTypeName(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitTypeName(self)
            else:
                return visitor.visitChildren(self)




    def typeName(self):

        localctx = CParser.TypeNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_typeName)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 840
            self.specifierQualifierList()
            self.state = 842
            _la = self._input.LA(1)
            if ((((_la - 59)) & ~0x3f) == 0 and ((1 << (_la - 59)) & ((1 << (CParser.LeftParen - 59)) | (1 << (CParser.LeftBracket - 59)) | (1 << (CParser.Star - 59)) | (1 << (CParser.Caret - 59)))) != 0):
                self.state = 841
                self.abstractDeclarator()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class AbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.AbstractDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def pointer(self):
            return self.getTypedRuleContext(CParser.PointerContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_abstractDeclarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterAbstractDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitAbstractDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)




    def abstractDeclarator(self):

        localctx = CParser.AbstractDeclaratorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_abstractDeclarator)
        self._la = 0 # Token type
        try:
            self.state = 855
            la_ = self._interp.adaptivePredict(self._input,90,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 844
                self.pointer()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 846
                _la = self._input.LA(1)
                if _la==CParser.Star or _la==CParser.Caret:
                    self.state = 845
                    self.pointer()


                self.state = 848
                self.directAbstractDeclarator(0)
                self.state = 852
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.T__10 or _la==CParser.T__11:
                    self.state = 849
                    self.gccDeclaratorExtension()
                    self.state = 854
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DirectAbstractDeclaratorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DirectAbstractDeclaratorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def abstractDeclarator(self):
            return self.getTypedRuleContext(CParser.AbstractDeclaratorContext,0)


        def gccDeclaratorExtension(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.GccDeclaratorExtensionContext)
            else:
                return self.getTypedRuleContext(CParser.GccDeclaratorExtensionContext,i)


        def typeQualifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.TypeQualifierContext)
            else:
                return self.getTypedRuleContext(CParser.TypeQualifierContext,i)


        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def parameterTypeList(self):
            return self.getTypedRuleContext(CParser.ParameterTypeListContext,0)


        def directAbstractDeclarator(self):
            return self.getTypedRuleContext(CParser.DirectAbstractDeclaratorContext,0)


        def getRuleIndex(self):
            return CParser.RULE_directAbstractDeclarator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDirectAbstractDeclarator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDirectAbstractDeclarator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDirectAbstractDeclarator(self)
            else:
                return visitor.visitChildren(self)



    def directAbstractDeclarator(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.DirectAbstractDeclaratorContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 108
        self.enterRecursionRule(localctx, 108, self.RULE_directAbstractDeclarator, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 914
            la_ = self._interp.adaptivePredict(self._input,98,self._ctx)
            if la_ == 1:
                self.state = 858
                self.match(CParser.LeftParen)
                self.state = 859
                self.abstractDeclarator()
                self.state = 860
                self.match(CParser.RightParen)
                self.state = 864
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,91,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 861
                        self.gccDeclaratorExtension() 
                    self.state = 866
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,91,self._ctx)

                pass

            elif la_ == 2:
                self.state = 867
                self.match(CParser.LeftBracket)
                self.state = 871
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 868
                    self.typeQualifier()
                    self.state = 873
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 875
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 874
                    self.assignmentExpression()


                self.state = 877
                self.match(CParser.RightBracket)
                pass

            elif la_ == 3:
                self.state = 878
                self.match(CParser.LeftBracket)
                self.state = 879
                self.match(CParser.Static)
                self.state = 883
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 880
                    self.typeQualifier()
                    self.state = 885
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 886
                self.assignmentExpression()
                self.state = 887
                self.match(CParser.RightBracket)
                pass

            elif la_ == 4:
                self.state = 889
                self.match(CParser.LeftBracket)
                self.state = 893
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                    self.state = 890
                    self.typeQualifier()
                    self.state = 895
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 896
                self.match(CParser.Static)
                self.state = 897
                self.assignmentExpression()
                self.state = 898
                self.match(CParser.RightBracket)
                pass

            elif la_ == 5:
                self.state = 900
                self.match(CParser.LeftBracket)
                self.state = 901
                self.match(CParser.Star)
                self.state = 902
                self.match(CParser.RightBracket)
                pass

            elif la_ == 6:
                self.state = 903
                self.match(CParser.LeftParen)
                self.state = 905
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                    self.state = 904
                    self.parameterTypeList()


                self.state = 907
                self.match(CParser.RightParen)
                self.state = 911
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,97,self._ctx)
                while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                    if _alt==1:
                        self.state = 908
                        self.gccDeclaratorExtension() 
                    self.state = 913
                    self._errHandler.sync(self)
                    _alt = self._interp.adaptivePredict(self._input,97,self._ctx)

                pass


            self._ctx.stop = self._input.LT(-1)
            self.state = 969
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,106,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    self.state = 967
                    la_ = self._interp.adaptivePredict(self._input,105,self._ctx)
                    if la_ == 1:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 916
                        if not self.precpred(self._ctx, 5):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 5)")
                        self.state = 917
                        self.match(CParser.LeftBracket)
                        self.state = 921
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 918
                            self.typeQualifier()
                            self.state = 923
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 925
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                            self.state = 924
                            self.assignmentExpression()


                        self.state = 927
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 2:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 928
                        if not self.precpred(self._ctx, 4):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 4)")
                        self.state = 929
                        self.match(CParser.LeftBracket)
                        self.state = 930
                        self.match(CParser.Static)
                        self.state = 934
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0):
                            self.state = 931
                            self.typeQualifier()
                            self.state = 936
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)

                        self.state = 937
                        self.assignmentExpression()
                        self.state = 938
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 3:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 940
                        if not self.precpred(self._ctx, 3):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 3)")
                        self.state = 941
                        self.match(CParser.LeftBracket)
                        self.state = 943 
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while True:
                            self.state = 942
                            self.typeQualifier()
                            self.state = 945 
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)
                            if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.Const) | (1 << CParser.Restrict) | (1 << CParser.Volatile) | (1 << CParser.Atomic))) != 0)):
                                break

                        self.state = 947
                        self.match(CParser.Static)
                        self.state = 948
                        self.assignmentExpression()
                        self.state = 949
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 4:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 951
                        if not self.precpred(self._ctx, 2):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 2)")
                        self.state = 952
                        self.match(CParser.LeftBracket)
                        self.state = 953
                        self.match(CParser.Star)
                        self.state = 954
                        self.match(CParser.RightBracket)
                        pass

                    elif la_ == 5:
                        localctx = CParser.DirectAbstractDeclaratorContext(self, _parentctx, _parentState)
                        self.pushNewRecursionContext(localctx, _startState, self.RULE_directAbstractDeclarator)
                        self.state = 955
                        if not self.precpred(self._ctx, 1):
                            from antlr4.error.Errors import FailedPredicateException
                            raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                        self.state = 956
                        self.match(CParser.LeftParen)
                        self.state = 958
                        _la = self._input.LA(1)
                        if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                            self.state = 957
                            self.parameterTypeList()


                        self.state = 960
                        self.match(CParser.RightParen)
                        self.state = 964
                        self._errHandler.sync(self)
                        _alt = self._interp.adaptivePredict(self._input,104,self._ctx)
                        while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                            if _alt==1:
                                self.state = 961
                                self.gccDeclaratorExtension() 
                            self.state = 966
                            self._errHandler.sync(self)
                            _alt = self._interp.adaptivePredict(self._input,104,self._ctx)

                        pass

             
                self.state = 971
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,106,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class TypedefNameContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.TypedefNameContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_typedefName

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterTypedefName(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitTypedefName(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitTypedefName(self)
            else:
                return visitor.visitChildren(self)




    def typedefName(self):

        localctx = CParser.TypedefNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_typedefName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 972
            self.match(CParser.Identifier)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.InitializerContext, self).__init__(parent, invokingState)
            self.parser = parser

        def assignmentExpression(self):
            return self.getTypedRuleContext(CParser.AssignmentExpressionContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initializer

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterInitializer(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitInitializer(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitInitializer(self)
            else:
                return visitor.visitChildren(self)




    def initializer(self):

        localctx = CParser.InitializerContext(self, self._ctx, self.state)
        self.enterRule(localctx, 112, self.RULE_initializer)
        try:
            self.state = 984
            la_ = self._interp.adaptivePredict(self._input,107,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 974
                self.assignmentExpression()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 975
                self.match(CParser.LeftBrace)
                self.state = 976
                self.initializerList(0)
                self.state = 977
                self.match(CParser.RightBrace)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 979
                self.match(CParser.LeftBrace)
                self.state = 980
                self.initializerList(0)
                self.state = 981
                self.match(CParser.Comma)
                self.state = 982
                self.match(CParser.RightBrace)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class InitializerListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.InitializerListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def initializer(self):
            return self.getTypedRuleContext(CParser.InitializerContext,0)


        def designation(self):
            return self.getTypedRuleContext(CParser.DesignationContext,0)


        def initializerList(self):
            return self.getTypedRuleContext(CParser.InitializerListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_initializerList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterInitializerList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitInitializerList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitInitializerList(self)
            else:
                return visitor.visitChildren(self)



    def initializerList(self, _p=0):
        _parentctx = self._ctx
        _parentState = self.state
        localctx = CParser.InitializerListContext(self, self._ctx, _parentState)
        _prevctx = localctx
        _startState = 114
        self.enterRecursionRule(localctx, 114, self.RULE_initializerList, _p)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 988
            _la = self._input.LA(1)
            if _la==CParser.LeftBracket or _la==CParser.Dot:
                self.state = 987
                self.designation()


            self.state = 990
            self.initializer()
            self._ctx.stop = self._input.LT(-1)
            self.state = 1000
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,110,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    if self._parseListeners is not None:
                        self.triggerExitRuleEvent()
                    _prevctx = localctx
                    localctx = CParser.InitializerListContext(self, _parentctx, _parentState)
                    self.pushNewRecursionContext(localctx, _startState, self.RULE_initializerList)
                    self.state = 992
                    if not self.precpred(self._ctx, 1):
                        from antlr4.error.Errors import FailedPredicateException
                        raise FailedPredicateException(self, "self.precpred(self._ctx, 1)")
                    self.state = 993
                    self.match(CParser.Comma)
                    self.state = 995
                    _la = self._input.LA(1)
                    if _la==CParser.LeftBracket or _la==CParser.Dot:
                        self.state = 994
                        self.designation()


                    self.state = 997
                    self.initializer() 
                self.state = 1002
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,110,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.unrollRecursionContexts(_parentctx)
        return localctx

    class DesignationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DesignationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def designatorList(self):
            return self.getTypedRuleContext(CParser.DesignatorListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_designation

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDesignation(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDesignation(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDesignation(self)
            else:
                return visitor.visitChildren(self)




    def designation(self):

        localctx = CParser.DesignationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 116, self.RULE_designation)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1003
            self.designatorList()
            self.state = 1004
            self.match(CParser.Assign)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DesignatorListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def designator(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DesignatorContext)
            else:
                return self.getTypedRuleContext(CParser.DesignatorContext,i)


        def getRuleIndex(self):
            return CParser.RULE_designatorList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDesignatorList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDesignatorList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDesignatorList(self)
            else:
                return visitor.visitChildren(self)




    def designatorList(self):

        localctx = CParser.DesignatorListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 118, self.RULE_designatorList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1007 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1006
                self.designator()
                self.state = 1009 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.LeftBracket or _la==CParser.Dot):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DesignatorContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DesignatorContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def getRuleIndex(self):
            return CParser.RULE_designator

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDesignator(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDesignator(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDesignator(self)
            else:
                return visitor.visitChildren(self)




    def designator(self):

        localctx = CParser.DesignatorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 120, self.RULE_designator)
        try:
            self.state = 1017
            token = self._input.LA(1)
            if token in [CParser.LeftBracket]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1011
                self.match(CParser.LeftBracket)
                self.state = 1012
                self.constantExpression()
                self.state = 1013
                self.match(CParser.RightBracket)

            elif token in [CParser.Dot]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1015
                self.match(CParser.Dot)
                self.state = 1016
                self.match(CParser.Identifier)

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StaticAssertDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StaticAssertDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def StringLiteral(self, i=None):
            if i is None:
                return self.getTokens(CParser.StringLiteral)
            else:
                return self.getToken(CParser.StringLiteral, i)

        def getRuleIndex(self):
            return CParser.RULE_staticAssertDeclaration

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStaticAssertDeclaration(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStaticAssertDeclaration(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStaticAssertDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def staticAssertDeclaration(self):

        localctx = CParser.StaticAssertDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 122, self.RULE_staticAssertDeclaration)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1019
            self.match(CParser.StaticAssert)
            self.state = 1020
            self.match(CParser.LeftParen)
            self.state = 1021
            self.constantExpression()
            self.state = 1022
            self.match(CParser.Comma)
            self.state = 1024 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1023
                self.match(CParser.StringLiteral)
                self.state = 1026 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==CParser.StringLiteral):
                    break

            self.state = 1028
            self.match(CParser.RightParen)
            self.state = 1029
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class StatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.StatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def labeledStatement(self):
            return self.getTypedRuleContext(CParser.LabeledStatementContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def expressionStatement(self):
            return self.getTypedRuleContext(CParser.ExpressionStatementContext,0)


        def selectionStatement(self):
            return self.getTypedRuleContext(CParser.SelectionStatementContext,0)


        def iterationStatement(self):
            return self.getTypedRuleContext(CParser.IterationStatementContext,0)


        def jumpStatement(self):
            return self.getTypedRuleContext(CParser.JumpStatementContext,0)


        def logicalOrExpression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.LogicalOrExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.LogicalOrExpressionContext,i)


        def getRuleIndex(self):
            return CParser.RULE_statement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitStatement(self)
            else:
                return visitor.visitChildren(self)




    def statement(self):

        localctx = CParser.StatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 124, self.RULE_statement)
        self._la = 0 # Token type
        try:
            self.state = 1068
            la_ = self._interp.adaptivePredict(self._input,119,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1031
                self.labeledStatement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1032
                self.compoundStatement()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1033
                self.expressionStatement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1034
                self.selectionStatement()
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1035
                self.iterationStatement()
                pass

            elif la_ == 6:
                self.enterOuterAlt(localctx, 6)
                self.state = 1036
                self.jumpStatement()
                pass

            elif la_ == 7:
                self.enterOuterAlt(localctx, 7)
                self.state = 1037
                _la = self._input.LA(1)
                if not(_la==CParser.T__10 or _la==CParser.T__12):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1038
                _la = self._input.LA(1)
                if not(_la==CParser.T__13 or _la==CParser.Volatile):
                    self._errHandler.recoverInline(self)
                else:
                    self.consume()
                self.state = 1039
                self.match(CParser.LeftParen)
                self.state = 1048
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1040
                    self.logicalOrExpression(0)
                    self.state = 1045
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    while _la==CParser.Comma:
                        self.state = 1041
                        self.match(CParser.Comma)
                        self.state = 1042
                        self.logicalOrExpression(0)
                        self.state = 1047
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)



                self.state = 1063
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==CParser.Colon:
                    self.state = 1050
                    self.match(CParser.Colon)
                    self.state = 1059
                    _la = self._input.LA(1)
                    if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                        self.state = 1051
                        self.logicalOrExpression(0)
                        self.state = 1056
                        self._errHandler.sync(self)
                        _la = self._input.LA(1)
                        while _la==CParser.Comma:
                            self.state = 1052
                            self.match(CParser.Comma)
                            self.state = 1053
                            self.logicalOrExpression(0)
                            self.state = 1058
                            self._errHandler.sync(self)
                            _la = self._input.LA(1)



                    self.state = 1065
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                self.state = 1066
                self.match(CParser.RightParen)
                self.state = 1067
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class LabeledStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.LabeledStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def constantExpression(self):
            return self.getTypedRuleContext(CParser.ConstantExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_labeledStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterLabeledStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitLabeledStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitLabeledStatement(self)
            else:
                return visitor.visitChildren(self)




    def labeledStatement(self):

        localctx = CParser.LabeledStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 126, self.RULE_labeledStatement)
        try:
            self.state = 1081
            token = self._input.LA(1)
            if token in [CParser.Identifier]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1070
                self.match(CParser.Identifier)
                self.state = 1071
                self.match(CParser.Colon)
                self.state = 1072
                self.statement()

            elif token in [CParser.Case]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1073
                self.match(CParser.Case)
                self.state = 1074
                self.constantExpression()
                self.state = 1075
                self.match(CParser.Colon)
                self.state = 1076
                self.statement()

            elif token in [CParser.Default]:
                self.enterOuterAlt(localctx, 3)
                self.state = 1078
                self.match(CParser.Default)
                self.state = 1079
                self.match(CParser.Colon)
                self.state = 1080
                self.statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompoundStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.CompoundStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockItemList(self):
            return self.getTypedRuleContext(CParser.BlockItemListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compoundStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterCompoundStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitCompoundStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitCompoundStatement(self)
            else:
                return visitor.visitChildren(self)




    def compoundStatement(self):

        localctx = CParser.CompoundStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 128, self.RULE_compoundStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1083
            self.match(CParser.LeftBrace)
            self.state = 1085
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1084
                self.blockItemList()


            self.state = 1087
            self.match(CParser.RightBrace)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockItemListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.BlockItemListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def blockItem(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.BlockItemContext)
            else:
                return self.getTypedRuleContext(CParser.BlockItemContext,i)


        def getRuleIndex(self):
            return CParser.RULE_blockItemList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterBlockItemList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitBlockItemList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitBlockItemList(self)
            else:
                return visitor.visitChildren(self)




    def blockItemList(self):

        localctx = CParser.BlockItemListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 130, self.RULE_blockItemList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1090 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1089
                self.blockItem()
                self.state = 1092 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__10) | (1 << CParser.T__11) | (1 << CParser.T__12) | (1 << CParser.Auto) | (1 << CParser.Break) | (1 << CParser.Case) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Continue) | (1 << CParser.Default) | (1 << CParser.Do) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.For) | (1 << CParser.Goto) | (1 << CParser.If) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Return) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Sizeof) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Switch) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.While) | (1 << CParser.Alignas) | (1 << CParser.Alignof) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Generic) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen) | (1 << CParser.LeftBrace))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Semi - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class BlockItemContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.BlockItemContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def getRuleIndex(self):
            return CParser.RULE_blockItem

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterBlockItem(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitBlockItem(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitBlockItem(self)
            else:
                return visitor.visitChildren(self)




    def blockItem(self):

        localctx = CParser.BlockItemContext(self, self._ctx, self.state)
        self.enterRule(localctx, 132, self.RULE_blockItem)
        try:
            self.state = 1096
            la_ = self._interp.adaptivePredict(self._input,123,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1094
                self.declaration()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1095
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExpressionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ExpressionStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_expressionStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterExpressionStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitExpressionStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitExpressionStatement(self)
            else:
                return visitor.visitChildren(self)




    def expressionStatement(self):

        localctx = CParser.ExpressionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 134, self.RULE_expressionStatement)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1099
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                self.state = 1098
                self.expression()


            self.state = 1101
            self.match(CParser.Semi)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class SelectionStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.SelectionStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def statement(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.StatementContext)
            else:
                return self.getTypedRuleContext(CParser.StatementContext,i)


        def getRuleIndex(self):
            return CParser.RULE_selectionStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterSelectionStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitSelectionStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitSelectionStatement(self)
            else:
                return visitor.visitChildren(self)




    def selectionStatement(self):

        localctx = CParser.SelectionStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 136, self.RULE_selectionStatement)
        try:
            self.state = 1118
            token = self._input.LA(1)
            if token in [CParser.If]:
                self.enterOuterAlt(localctx, 1)
                self.state = 1103
                self.match(CParser.If)
                self.state = 1104
                self.match(CParser.LeftParen)
                self.state = 1105
                self.expression()
                self.state = 1106
                self.match(CParser.RightParen)
                self.state = 1107
                self.statement()
                self.state = 1110
                la_ = self._interp.adaptivePredict(self._input,125,self._ctx)
                if la_ == 1:
                    self.state = 1108
                    self.match(CParser.Else)
                    self.state = 1109
                    self.statement()



            elif token in [CParser.Switch]:
                self.enterOuterAlt(localctx, 2)
                self.state = 1112
                self.match(CParser.Switch)
                self.state = 1113
                self.match(CParser.LeftParen)
                self.state = 1114
                self.expression()
                self.state = 1115
                self.match(CParser.RightParen)
                self.state = 1116
                self.statement()

            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class IterationStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.IterationStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def expression(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(CParser.ExpressionContext,i)


        def statement(self):
            return self.getTypedRuleContext(CParser.StatementContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_iterationStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterIterationStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitIterationStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitIterationStatement(self)
            else:
                return visitor.visitChildren(self)




    def iterationStatement(self):

        localctx = CParser.IterationStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 138, self.RULE_iterationStatement)
        self._la = 0 # Token type
        try:
            self.state = 1162
            la_ = self._interp.adaptivePredict(self._input,132,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1120
                self.match(CParser.While)
                self.state = 1121
                self.match(CParser.LeftParen)
                self.state = 1122
                self.expression()
                self.state = 1123
                self.match(CParser.RightParen)
                self.state = 1124
                self.statement()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1126
                self.match(CParser.Do)
                self.state = 1127
                self.statement()
                self.state = 1128
                self.match(CParser.While)
                self.state = 1129
                self.match(CParser.LeftParen)
                self.state = 1130
                self.expression()
                self.state = 1131
                self.match(CParser.RightParen)
                self.state = 1132
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1134
                self.match(CParser.For)
                self.state = 1135
                self.match(CParser.LeftParen)
                self.state = 1137
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1136
                    self.expression()


                self.state = 1139
                self.match(CParser.Semi)
                self.state = 1141
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1140
                    self.expression()


                self.state = 1143
                self.match(CParser.Semi)
                self.state = 1145
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1144
                    self.expression()


                self.state = 1147
                self.match(CParser.RightParen)
                self.state = 1148
                self.statement()
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1149
                self.match(CParser.For)
                self.state = 1150
                self.match(CParser.LeftParen)
                self.state = 1151
                self.declaration()
                self.state = 1153
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1152
                    self.expression()


                self.state = 1155
                self.match(CParser.Semi)
                self.state = 1157
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1156
                    self.expression()


                self.state = 1159
                self.match(CParser.RightParen)
                self.state = 1160
                self.statement()
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class JumpStatementContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.JumpStatementContext, self).__init__(parent, invokingState)
            self.parser = parser

        def Identifier(self):
            return self.getToken(CParser.Identifier, 0)

        def expression(self):
            return self.getTypedRuleContext(CParser.ExpressionContext,0)


        def unaryExpression(self):
            return self.getTypedRuleContext(CParser.UnaryExpressionContext,0)


        def getRuleIndex(self):
            return CParser.RULE_jumpStatement

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterJumpStatement(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitJumpStatement(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitJumpStatement(self)
            else:
                return visitor.visitChildren(self)




    def jumpStatement(self):

        localctx = CParser.JumpStatementContext(self, self._ctx, self.state)
        self.enterRule(localctx, 140, self.RULE_jumpStatement)
        self._la = 0 # Token type
        try:
            self.state = 1180
            la_ = self._interp.adaptivePredict(self._input,134,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1164
                self.match(CParser.Goto)
                self.state = 1165
                self.match(CParser.Identifier)
                self.state = 1166
                self.match(CParser.Semi)
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1167
                self.match(CParser.Continue)
                self.state = 1168
                self.match(CParser.Semi)
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1169
                self.match(CParser.Break)
                self.state = 1170
                self.match(CParser.Semi)
                pass

            elif la_ == 4:
                self.enterOuterAlt(localctx, 4)
                self.state = 1171
                self.match(CParser.Return)
                self.state = 1173
                _la = self._input.LA(1)
                if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__1) | (1 << CParser.T__2) | (1 << CParser.Sizeof) | (1 << CParser.Alignof) | (1 << CParser.Generic) | (1 << CParser.LeftParen))) != 0) or ((((_la - 71)) & ~0x3f) == 0 and ((1 << (_la - 71)) & ((1 << (CParser.Plus - 71)) | (1 << (CParser.PlusPlus - 71)) | (1 << (CParser.Minus - 71)) | (1 << (CParser.MinusMinus - 71)) | (1 << (CParser.Star - 71)) | (1 << (CParser.And - 71)) | (1 << (CParser.AndAnd - 71)) | (1 << (CParser.Not - 71)) | (1 << (CParser.Tilde - 71)) | (1 << (CParser.Identifier - 71)) | (1 << (CParser.Constant - 71)) | (1 << (CParser.StringLiteral - 71)))) != 0):
                    self.state = 1172
                    self.expression()


                self.state = 1175
                self.match(CParser.Semi)
                pass

            elif la_ == 5:
                self.enterOuterAlt(localctx, 5)
                self.state = 1176
                self.match(CParser.Goto)
                self.state = 1177
                self.unaryExpression()
                self.state = 1178
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class CompilationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.CompilationUnitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def EOF(self):
            return self.getToken(CParser.EOF, 0)

        def translationUnit(self):
            return self.getTypedRuleContext(CParser.TranslationUnitContext,0)


        def getRuleIndex(self):
            return CParser.RULE_compilationUnit

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterCompilationUnit(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitCompilationUnit(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitCompilationUnit(self)
            else:
                return visitor.visitChildren(self)




    def compilationUnit(self):

        localctx = CParser.CompilationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 142, self.RULE_compilationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1183
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)))) != 0):
                self.state = 1182
                self.translationUnit()


            self.state = 1185
            self.match(CParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class TranslationUnitContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.TranslationUnitContext, self).__init__(parent, invokingState)
            self.parser = parser

        def externalDeclaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.ExternalDeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.ExternalDeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_translationUnit

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterTranslationUnit(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitTranslationUnit(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitTranslationUnit(self)
            else:
                return visitor.visitChildren(self)




    def translationUnit(self):

        localctx = CParser.TranslationUnitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 144, self.RULE_translationUnit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1188 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1187
                self.externalDeclaration()
                self.state = 1190 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal) | (1 << CParser.LeftParen))) != 0) or ((((_la - 75)) & ~0x3f) == 0 and ((1 << (_la - 75)) & ((1 << (CParser.Star - 75)) | (1 << (CParser.Caret - 75)) | (1 << (CParser.Semi - 75)) | (1 << (CParser.Identifier - 75)))) != 0)):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class ExternalDeclarationContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.ExternalDeclarationContext, self).__init__(parent, invokingState)
            self.parser = parser

        def functionDefinition(self):
            return self.getTypedRuleContext(CParser.FunctionDefinitionContext,0)


        def declaration(self):
            return self.getTypedRuleContext(CParser.DeclarationContext,0)


        def getRuleIndex(self):
            return CParser.RULE_externalDeclaration

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterExternalDeclaration(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitExternalDeclaration(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitExternalDeclaration(self)
            else:
                return visitor.visitChildren(self)




    def externalDeclaration(self):

        localctx = CParser.ExternalDeclarationContext(self, self._ctx, self.state)
        self.enterRule(localctx, 146, self.RULE_externalDeclaration)
        try:
            self.state = 1195
            la_ = self._interp.adaptivePredict(self._input,137,self._ctx)
            if la_ == 1:
                self.enterOuterAlt(localctx, 1)
                self.state = 1192
                self.functionDefinition()
                pass

            elif la_ == 2:
                self.enterOuterAlt(localctx, 2)
                self.state = 1193
                self.declaration()
                pass

            elif la_ == 3:
                self.enterOuterAlt(localctx, 3)
                self.state = 1194
                self.match(CParser.Semi)
                pass


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class FunctionDefinitionContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.FunctionDefinitionContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declarator(self):
            return self.getTypedRuleContext(CParser.DeclaratorContext,0)


        def compoundStatement(self):
            return self.getTypedRuleContext(CParser.CompoundStatementContext,0)


        def declarationSpecifier(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationSpecifierContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationSpecifierContext,i)


        def declarationList(self):
            return self.getTypedRuleContext(CParser.DeclarationListContext,0)


        def getRuleIndex(self):
            return CParser.RULE_functionDefinition

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterFunctionDefinition(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitFunctionDefinition(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitFunctionDefinition(self)
            else:
                return visitor.visitChildren(self)




    def functionDefinition(self):

        localctx = CParser.FunctionDefinitionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 148, self.RULE_functionDefinition)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1200
            self._errHandler.sync(self)
            _alt = self._interp.adaptivePredict(self._input,138,self._ctx)
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt==1:
                    self.state = 1197
                    self.declarationSpecifier() 
                self.state = 1202
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,138,self._ctx)

            self.state = 1203
            self.declarator()
            self.state = 1205
            _la = self._input.LA(1)
            if (((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier:
                self.state = 1204
                self.declarationList()


            self.state = 1207
            self.compoundStatement()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx

    class DeclarationListContext(ParserRuleContext):

        def __init__(self, parser, parent=None, invokingState=-1):
            super(CParser.DeclarationListContext, self).__init__(parent, invokingState)
            self.parser = parser

        def declaration(self, i=None):
            if i is None:
                return self.getTypedRuleContexts(CParser.DeclarationContext)
            else:
                return self.getTypedRuleContext(CParser.DeclarationContext,i)


        def getRuleIndex(self):
            return CParser.RULE_declarationList

        def enterRule(self, listener):
            if isinstance( listener, CListener ):
                listener.enterDeclarationList(self)

        def exitRule(self, listener):
            if isinstance( listener, CListener ):
                listener.exitDeclarationList(self)

        def accept(self, visitor):
            if isinstance( visitor, CVisitor ):
                return visitor.visitDeclarationList(self)
            else:
                return visitor.visitChildren(self)




    def declarationList(self):

        localctx = CParser.DeclarationListContext(self, self._ctx, self.state)
        self.enterRule(localctx, 150, self.RULE_declarationList)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 1210 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 1209
                self.declaration()
                self.state = 1212 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not ((((_la) & ~0x3f) == 0 and ((1 << _la) & ((1 << CParser.T__0) | (1 << CParser.T__3) | (1 << CParser.T__4) | (1 << CParser.T__5) | (1 << CParser.T__6) | (1 << CParser.T__7) | (1 << CParser.T__8) | (1 << CParser.T__9) | (1 << CParser.T__11) | (1 << CParser.Auto) | (1 << CParser.Char) | (1 << CParser.Const) | (1 << CParser.Double) | (1 << CParser.Enum) | (1 << CParser.Extern) | (1 << CParser.Float) | (1 << CParser.Inline) | (1 << CParser.Int) | (1 << CParser.Long) | (1 << CParser.Register) | (1 << CParser.Restrict) | (1 << CParser.Short) | (1 << CParser.Signed) | (1 << CParser.Static) | (1 << CParser.Struct) | (1 << CParser.Typedef) | (1 << CParser.Union) | (1 << CParser.Unsigned) | (1 << CParser.Void) | (1 << CParser.Volatile) | (1 << CParser.Alignas) | (1 << CParser.Atomic) | (1 << CParser.Bool) | (1 << CParser.Complex) | (1 << CParser.Noreturn) | (1 << CParser.StaticAssert) | (1 << CParser.ThreadLocal))) != 0) or _la==CParser.Identifier):
                    break

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx



    def sempred(self, localctx, ruleIndex, predIndex):
        if self._predicates == None:
            self._predicates = dict()
        self._predicates[2] = self.postfixExpression_sempred
        self._predicates[7] = self.multiplicativeExpression_sempred
        self._predicates[8] = self.additiveExpression_sempred
        self._predicates[9] = self.shiftExpression_sempred
        self._predicates[10] = self.relationalExpression_sempred
        self._predicates[11] = self.equalityExpression_sempred
        self._predicates[12] = self.andExpression_sempred
        self._predicates[13] = self.exclusiveOrExpression_sempred
        self._predicates[14] = self.inclusiveOrExpression_sempred
        self._predicates[15] = self.logicalAndExpression_sempred
        self._predicates[16] = self.logicalOrExpression_sempred
        self._predicates[42] = self.directDeclarator_sempred
        self._predicates[54] = self.directAbstractDeclarator_sempred
        self._predicates[57] = self.initializerList_sempred
        pred = self._predicates.get(ruleIndex, None)
        if pred is None:
            raise Exception("No predicate with index:" + str(ruleIndex))
        else:
            return pred(localctx, predIndex)

    def postfixExpression_sempred(self, localctx, predIndex):
            if predIndex == 0:
                return self.precpred(self._ctx, 10)
         

            if predIndex == 1:
                return self.precpred(self._ctx, 9)
         

            if predIndex == 2:
                return self.precpred(self._ctx, 8)
         

            if predIndex == 3:
                return self.precpred(self._ctx, 7)
         

            if predIndex == 4:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 5:
                return self.precpred(self._ctx, 5)
         

    def multiplicativeExpression_sempred(self, localctx, predIndex):
            if predIndex == 6:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 7:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 8:
                return self.precpred(self._ctx, 1)
         

    def additiveExpression_sempred(self, localctx, predIndex):
            if predIndex == 9:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 10:
                return self.precpred(self._ctx, 1)
         

    def shiftExpression_sempred(self, localctx, predIndex):
            if predIndex == 11:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 12:
                return self.precpred(self._ctx, 1)
         

    def relationalExpression_sempred(self, localctx, predIndex):
            if predIndex == 13:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 14:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 15:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 16:
                return self.precpred(self._ctx, 1)
         

    def equalityExpression_sempred(self, localctx, predIndex):
            if predIndex == 17:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 18:
                return self.precpred(self._ctx, 1)
         

    def andExpression_sempred(self, localctx, predIndex):
            if predIndex == 19:
                return self.precpred(self._ctx, 1)
         

    def exclusiveOrExpression_sempred(self, localctx, predIndex):
            if predIndex == 20:
                return self.precpred(self._ctx, 1)
         

    def inclusiveOrExpression_sempred(self, localctx, predIndex):
            if predIndex == 21:
                return self.precpred(self._ctx, 1)
         

    def logicalAndExpression_sempred(self, localctx, predIndex):
            if predIndex == 22:
                return self.precpred(self._ctx, 1)
         

    def logicalOrExpression_sempred(self, localctx, predIndex):
            if predIndex == 23:
                return self.precpred(self._ctx, 1)
         

    def directDeclarator_sempred(self, localctx, predIndex):
            if predIndex == 24:
                return self.precpred(self._ctx, 6)
         

            if predIndex == 25:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 26:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 27:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 28:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 29:
                return self.precpred(self._ctx, 1)
         

    def directAbstractDeclarator_sempred(self, localctx, predIndex):
            if predIndex == 30:
                return self.precpred(self._ctx, 5)
         

            if predIndex == 31:
                return self.precpred(self._ctx, 4)
         

            if predIndex == 32:
                return self.precpred(self._ctx, 3)
         

            if predIndex == 33:
                return self.precpred(self._ctx, 2)
         

            if predIndex == 34:
                return self.precpred(self._ctx, 1)
         

    def initializerList_sempred(self, localctx, predIndex):
            if predIndex == 35:
                return self.precpred(self._ctx, 1)
         



